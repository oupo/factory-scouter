/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./ts/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./ts/constant.ts":
/*!************************!*\
  !*** ./ts/constant.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.NSTARTERS = 6;
exports.NBATTLES = 7;
exports.NPARTY = 3;


/***/ }),

/***/ "./ts/data.ts":
/*!********************!*\
  !*** ./ts/data.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.POKEMON_NAMES = ["", "フシギダネ", "フシギソウ", "フシギバナ", "ヒトカゲ", "リザード", "リザードン", "ゼニガメ", "カメール", "カメックス", "キャタピー", "トランセル", "バタフリー", "ビードル", "コクーン", "スピアー", "ポッポ", "ピジョン", "ピジョット", "コラッタ", "ラッタ", "オニスズメ", "オニドリル", "アーボ", "アーボック", "ピカチュウ", "ライチュウ", "サンド", "サンドパン", "ニドラン♀", "ニドリーナ", "ニドクイン", "ニドラン♂", "ニドリーノ", "ニドキング", "ピッピ", "ピクシー", "ロコン", "キュウコン", "プリン", "プクリン", "ズバット", "ゴルバット", "ナゾノクサ", "クサイハナ", "ラフレシア", "パラス", "パラセクト", "コンパン", "モルフォン", "ディグダ", "ダグトリオ", "ニャース", "ペルシアン", "コダック", "ゴルダック", "マンキー", "オコリザル", "ガーディ", "ウインディ", "ニョロモ", "ニョロゾ", "ニョロボン", "ケーシィ", "ユンゲラー", "フーディン", "ワンリキー", "ゴーリキー", "カイリキー", "マダツボミ", "ウツドン", "ウツボット", "メノクラゲ", "ドククラゲ", "イシツブテ", "ゴローン", "ゴローニャ", "ポニータ", "ギャロップ", "ヤドン", "ヤドラン", "コイル", "レアコイル", "カモネギ", "ドードー", "ドードリオ", "パウワウ", "ジュゴン", "ベトベター", "ベトベトン", "シェルダー", "パルシェン", "ゴース", "ゴースト", "ゲンガー", "イワーク", "スリープ", "スリーパー", "クラブ", "キングラー", "ビリリダマ", "マルマイン", "タマタマ", "ナッシー", "カラカラ", "ガラガラ", "サワムラー", "エビワラー", "ベロリンガ", "ドガース", "マタドガス", "サイホーン", "サイドン", "ラッキー", "モンジャラ", "ガルーラ", "タッツー", "シードラ", "トサキント", "アズマオウ", "ヒトデマン", "スターミー", "バリヤード", "ストライク", "ルージュラ", "エレブー", "ブーバー", "カイロス", "ケンタロス", "コイキング", "ギャラドス", "ラプラス", "メタモン", "イーブイ", "シャワーズ", "サンダース", "ブースター", "ポリゴン", "オムナイト", "オムスター", "カブト", "カブトプス", "プテラ", "カビゴン", "フリーザー", "サンダー", "ファイヤー", "ミニリュウ", "ハクリュー", "カイリュー", "ミュウツー", "ミュウ", "チコリータ", "ベイリーフ", "メガニウム", "ヒノアラシ", "マグマラシ", "バクフーン", "ワニノコ", "アリゲイツ", "オーダイル", "オタチ", "オオタチ", "ホーホー", "ヨルノズク", "レディバ", "レディアン", "イトマル", "アリアドス", "クロバット", "チョンチー", "ランターン", "ピチュー", "ピィ", "ププリン", "トゲピー", "トゲチック", "ネイティ", "ネイティオ", "メリープ", "モココ", "デンリュウ", "キレイハナ", "マリル", "マリルリ", "ウソッキー", "ニョロトノ", "ハネッコ", "ポポッコ", "ワタッコ", "エイパム", "ヒマナッツ", "キマワリ", "ヤンヤンマ", "ウパー", "ヌオー", "エーフィ", "ブラッキー", "ヤミカラス", "ヤドキング", "ムウマ", "アンノーン", "ソーナンス", "キリンリキ", "クヌギダマ", "フォレトス", "ノコッチ", "グライガー", "ハガネール", "ブルー", "グランブル", "ハリーセン", "ハッサム", "ツボツボ", "ヘラクロス", "ニューラ", "ヒメグマ", "リングマ", "マグマッグ", "マグカルゴ", "ウリムー", "イノムー", "サニーゴ", "テッポウオ", "オクタン", "デリバード", "マンタイン", "エアームド", "デルビル", "ヘルガー", "キングドラ", "ゴマゾウ", "ドンファン", "ポリゴン2", "オドシシ", "ドーブル", "バルキー", "カポエラー", "ムチュール", "エレキッド", "ブビィ", "ミルタンク", "ハピナス", "ライコウ", "エンテイ", "スイクン", "ヨーギラス", "サナギラス", "バンギラス", "ルギア", "ホウオウ", "セレビィ", "キモリ", "ジュプトル", "ジュカイン", "アチャモ", "ワカシャモ", "バシャーモ", "ミズゴロウ", "ヌマクロー", "ラグラージ", "ポチエナ", "グラエナ", "ジグザグマ", "マッスグマ", "ケムッソ", "カラサリス", "アゲハント", "マユルド", "ドクケイル", "ハスボー", "ハスブレロ", "ルンパッパ", "タネボー", "コノハナ", "ダーテング", "スバメ", "オオスバメ", "キャモメ", "ペリッパー", "ラルトス", "キルリア", "サーナイト", "アメタマ", "アメモース", "キノココ", "キノガッサ", "ナマケロ", "ヤルキモノ", "ケッキング", "ツチニン", "テッカニン", "ヌケニン", "ゴニョニョ", "ドゴーム", "バクオング", "マクノシタ", "ハリテヤマ", "ルリリ", "ノズパス", "エネコ", "エネコロロ", "ヤミラミ", "クチート", "ココドラ", "コドラ", "ボスゴドラ", "アサナン", "チャーレム", "ラクライ", "ライボルト", "プラスル", "マイナン", "バルビート", "イルミーゼ", "ロゼリア", "ゴクリン", "マルノーム", "キバニア", "サメハダー", "ホエルコ", "ホエルオー", "ドンメル", "バクーダ", "コータス", "バネブー", "ブーピッグ", "パッチール", "ナックラー", "ビブラーバ", "フライゴン", "サボネア", "ノクタス", "チルット", "チルタリス", "ザングース", "ハブネーク", "ルナトーン", "ソルロック", "ドジョッチ", "ナマズン", "ヘイガニ", "シザリガー", "ヤジロン", "ネンドール", "リリーラ", "ユレイドル", "アノプス", "アーマルド", "ヒンバス", "ミロカロス", "ポワルン", "カクレオン", "カゲボウズ", "ジュペッタ", "ヨマワル", "サマヨール", "トロピウス", "チリーン", "アブソル", "ソーナノ", "ユキワラシ", "オニゴーリ", "タマザラシ", "トドグラー", "トドゼルガ", "パールル", "ハンテール", "サクラビス", "ジーランス", "ラブカス", "タツベイ", "コモルー", "ボーマンダ", "ダンバル", "メタング", "メタグロス", "レジロック", "レジアイス", "レジスチル", "ラティアス", "ラティオス", "カイオーガ", "グラードン", "レックウザ", "ジラーチ", "デオキシス", "ナエトル", "ハヤシガメ", "ドダイトス", "ヒコザル", "モウカザル", "ゴウカザル", "ポッチャマ", "ポッタイシ", "エンペルト", "ムックル", "ムクバード", "ムクホーク", "ビッパ", "ビーダル", "コロボーシ", "コロトック", "コリンク", "ルクシオ", "レントラー", "スボミー", "ロズレイド", "ズガイドス", "ラムパルド", "タテトプス", "トリデプス", "ミノムッチ", "ミノマダム", "ガーメイル", "ミツハニー", "ビークイン", "パチリス", "ブイゼル", "フローゼル", "チェリンボ", "チェリム", "カラナクシ", "トリトドン", "エテボース", "フワンテ", "フワライド", "ミミロル", "ミミロップ", "ムウマージ", "ドンカラス", "ニャルマー", "ブニャット", "リーシャン", "スカンプー", "スカタンク", "ドーミラー", "ドータクン", "ウソハチ", "マネネ", "ピンプク", "ペラップ", "ミカルゲ", "フカマル", "ガバイト", "ガブリアス", "ゴンベ", "リオル", "ルカリオ", "ヒポポタス", "カバルドン", "スコルピ", "ドラピオン", "グレッグル", "ドクロッグ", "マスキッパ", "ケイコウオ", "ネオラント", "タマンタ", "ユキカブリ", "ユキノオー", "マニューラ", "ジバコイル", "ベロベルト", "ドサイドン", "モジャンボ", "エレキブル", "ブーバーン", "トゲキッス", "メガヤンマ", "リーフィア", "グレイシア", "グライオン", "マンムー", "ポリゴンZ", "エルレイド", "ダイノーズ", "ヨノワール", "ユキメノコ", "ロトム", "ユクシー", "エムリット", "アグノム", "ディアルガ", "パルキア", "ヒードラン", "レジギガス", "ギラティナ", "クレセリア", "フィオネ", "マナフィ", "ダークライ", "シェイミ", "アルセウス"];
exports.NATURE_NAMES = ["がんばりや", "さみしがり", "ゆうかん", "いじっぱり", "やんちゃ", "ずぶとい", "すなお", "のんき", "わんぱく", "のうてんき", "おくびょう", "せっかち", "まじめ", "ようき", "むじゃき", "ひかえめ", "おっとり", "れいせい", "てれや", "うっかりや", "おだやか", "おとなしい", "なまいき", "しんちょう", "きまぐれ"];
exports.ITEM_NAMES = ["", "マスターボール", "ハイパーボール", "スーパーボール", "モンスターボール", "サファリボール", "ネットボール", "ダイブボール", "ネストボール", "リピートボール", "タイマーボール", "ゴージャスボール", "プレミアボール", "ダークボール", "ヒールボール", "クイックボール", "プレシャスボール", "キズぐすり", "どくけし", "やけどなおし", "こおりなおし", "ねむけざまし", "まひなおし", "かいふくのくすり", "まんたんのくすり", "すごいキズぐすり", "いいキズぐすり", "なんでもなおし", "げんきのかけら", "げんきのかたまり", "おいしいみず", "サイコソーダ", "ミックスオレ", "モーモーミルク", "ちからのこな", "ちからのねっこ", "ばんのうごな", "ふっかつそう", "ピーピーエイド", "ピーピーリカバー", "ピーピーエイダー", "ピーピーマックス", "フエンせんべい", "きのみジュース", "せいなるはい", "マックスアップ", "タウリン", "ブロムヘキシン", "インドメタシン", "リゾチウム", "ふしぎなアメ", "ポイントアップ", "キトサン", "ポイントマックス", "もりのヨウカン", "エフェクトガード", "クリティカッター", "プラスパワー", "ディフェンダー", "スピーダー", "ヨクアタール", "スペシャルアップ", "スペシャルガード", "ピッピにんぎょう", "エネコのシッポ", "あおいビードロ", "きいろビードロ", "あかいビードロ", "くろいビードロ", "しろいビードロ", "あさせのしお", "あさせのかいがら", "あかいかけら", "あおいかけら", "きいろいかけら", "みどりのかけら", "シルバースプレー", "ゴールドスプレー", "あなぬけのヒモ", "むしよけスプレー", "たいようのいし", "つきのいし", "ほのおのいし", "かみなりのいし", "みずのいし", "リーフのいし", "ちいさなキノコ", "おおきなキノコ", "しんじゅ", "おおきなしんじゅ", "ほしのすな", "ほしのかけら", "きんのたま", "ハートのウロコ", "あまいミツ", "すくすくこやし", "じめじめこやし", "ながながこやし", "ねばねばこやし", "ねっこのカセキ", "ツメのカセキ", "かいのカセキ", "こうらのカセキ", "ひみつのコハク", "たてのカセキ", "ずがいのカセキ", "きちょうなホネ", "ひかりのいし", "やみのいし", "めざめいし", "まんまるいし", "かなめいし", "はっきんだま", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "？？？", "こんごうだま", "しらたま", "グラスメール", "フレイムメール", "ブルーメール", "ブルームメール", "トンネルメール", "スチールメール", "ラブラブメール", "ブリザードメール", "スペースメール", "エアメール", "モザイクメール", "ブリックメール", "クラボのみ", "カゴのみ", "モモンのみ", "チーゴのみ", "ナナシのみ", "ヒメリのみ", "オレンのみ", "キーのみ", "ラムのみ", "オボンのみ", "フィラのみ", "ウイのみ", "マゴのみ", "バンジのみ", "イアのみ", "ズリのみ", "ブリーのみ", "ナナのみ", "セシナのみ", "パイルのみ", "ザロクのみ", "ネコブのみ", "タポルのみ", "ロメのみ", "ウブのみ", "マトマのみ", "モコシのみ", "ゴスのみ", "ラブタのみ", "ノメルのみ", "ノワキのみ", "シーヤのみ", "カイスのみ", "ドリのみ", "ベリブのみ", "オッカのみ", "イトケのみ", "ソクノのみ", "リンドのみ", "ヤチェのみ", "ヨプのみ", "ビアーのみ", "シュカのみ", "バコウのみ", "ウタンのみ", "タンガのみ", "ヨロギのみ", "カシブのみ", "ハバンのみ", "ナモのみ", "リリバのみ", "ホズのみ", "チイラのみ", "リュガのみ", "カムラのみ", "ヤタピのみ", "ズアのみ", "サンのみ", "スターのみ", "ナゾのみ", "ミクルのみ", "イバンのみ", "ジャポのみ", "レンブのみ", "ひかりのこな", "しろいハーブ", "きょうせいギプス", "がくしゅうそうち", "せんせいのツメ", "やすらぎのすず", "メンタルハーブ", "こだわりハチマキ", "おうじゃのしるし", "ぎんのこな", "おまもりこばん", "きよめのおふだ", "こころのしずく", "しんかいのキバ", "しんかいのウロコ", "けむりだま", "かわらずのいし", "きあいのハチマキ", "しあわせタマゴ", "ピントレンズ", "メタルコート", "たべのこし", "りゅうのウロコ", "でんきだま", "やわらかいすな", "かたいいし", "きせきのタネ", "くろいメガネ", "くろおび", "じしゃく", "しんぴのしずく", "するどいくちばし", "どくバリ", "とけないこおり", "のろいのおふだ", "まがったスプーン", "もくたん", "りゅうのキバ", "シルクのスカーフ", "アップグレード", "かいがらのすず", "うしおのおこう", "のんきのおこう", "ラッキーパンチ", "メタルパウダー", "ふといホネ", "ながねぎ", "あかいバンダナ", "あおいバンダナ", "ピンクのバンダナ", "みどりのバンダナ", "きいろのバンダナ", "こうかくレンズ", "ちからのハチマキ", "ものしりメガネ", "たつじんのおび", "ひかりのねんど", "いのちのたま", "パワフルハーブ", "どくどくだま", "かえんだま", "スピードパウダー", "きあいのタスキ", "フォーカスレンズ", "メトロノーム", "くろいてっきゅう", "こうこうのしっぽ", "あかいいと", "くろいヘドロ", "つめたいいわ", "さらさらいわ", "あついいわ", "しめったいわ", "ねばりのかぎづめ", "こだわりスカーフ", "くっつきバリ", "パワーリスト", "パワーベルト", "パワーレンズ", "パワーバンド", "パワーアンクル", "パワーウエイト", "きれいなぬけがら", "おおきなねっこ", "こだわりメガネ", "ひのたまプレート", "しずくプレート", "いかずちプレート", "みどりのプレート", "つららのプレート", "こぶしのプレート", "もうどくプレート", "だいちのプレート", "あおぞらプレート", "ふしぎのプレート", "たまむしプレート", "がんせきプレート", "もののけプレート", "りゅうのプレート", "こわもてプレート", "こうてつプレート", "あやしいおこう", "がんせきおこう", "まんぷくおこう", "さざなみのおこう", "おはなのおこう", "こううんのおこう", "きよめのおこう", "プロテクター", "エレキブースター", "マグマブースター", "あやしいパッチ", "れいかいのぬの", "するどいツメ", "するどいキバ", "わざマシン０１", "わざマシン０２", "わざマシン０３", "わざマシン０４", "わざマシン０５", "わざマシン０６", "わざマシン０７", "わざマシン０８", "わざマシン０９", "わざマシン１０", "わざマシン１１", "わざマシン１２", "わざマシン１３", "わざマシン１４", "わざマシン１５", "わざマシン１６", "わざマシン１７", "わざマシン１８", "わざマシン１９", "わざマシン２０", "わざマシン２１", "わざマシン２２", "わざマシン２３", "わざマシン２４", "わざマシン２５", "わざマシン２６", "わざマシン２７", "わざマシン２８", "わざマシン２９", "わざマシン３０", "わざマシン３１", "わざマシン３２", "わざマシン３３", "わざマシン３４", "わざマシン３５", "わざマシン３６", "わざマシン３７", "わざマシン３８", "わざマシン３９", "わざマシン４０", "わざマシン４１", "わざマシン４２", "わざマシン４３", "わざマシン４４", "わざマシン４５", "わざマシン４６", "わざマシン４７", "わざマシン４８", "わざマシン４９", "わざマシン５０", "わざマシン５１", "わざマシン５２", "わざマシン５３", "わざマシン５４", "わざマシン５５", "わざマシン５６", "わざマシン５７", "わざマシン５８", "わざマシン５９", "わざマシン６０", "わざマシン６１", "わざマシン６２", "わざマシン６３", "わざマシン６４", "わざマシン６５", "わざマシン６６", "わざマシン６７", "わざマシン６８", "わざマシン６９", "わざマシン７０", "わざマシン７１", "わざマシン７２", "わざマシン７３", "わざマシン７４", "わざマシン７５", "わざマシン７６", "わざマシン７７", "わざマシン７８", "わざマシン７９", "わざマシン８０", "わざマシン８１", "わざマシン８２", "わざマシン８３", "わざマシン８４", "わざマシン８５", "わざマシン８６", "わざマシン８７", "わざマシン８８", "わざマシン８９", "わざマシン９０", "わざマシン９１", "わざマシン９２", "ひでんマシン０１", "ひでんマシン０２", "ひでんマシン０３", "ひでんマシン０４", "ひでんマシン０５", "ひでんマシン０６", "ひでんマシン０７", "ひでんマシン０８", "？？？", "たからぶくろ", "ルールブック", "ポケトレ", "ポイントカード", "ぼうけんノート", "シールいれ", "アクセサリーいれ", "シールぶくろ", "ともだちてちょう", "はつでんしょキー", "こだいのおまもり", "ギンガだんのカギ", "あかいくさり", "タウンマップ", "バトルサーチャー", "コインケース", "ボロのつりざお", "いいつりざお", "すごいつりざお", "コダックじょうろ", "ポフィンケース", "じてんしゃ", "ルームキー", "オーキドのてがみ", "みかづきのはね", "メンバーズカード", "てんかいのふえ", "ふねのチケット", "コンテストパス", "かざんのおきいし", "おとどけもの", "ひきかえけん１", "ひきかえけん２", "ひきかえけん３", "そうこのカギ", "ひでんのくすり", "バトルレコーダー", "グラシデアのはな", "ひみつのカギ", "ぼんぐりケース", "アンノーンノート", "きのみプランター", "ダウジングマシン", "ブルーカード", "おいしいシッポ", "とうめいなスズ", "カードキー", "ちかのかぎ", "ゼニガメじょうろ", "あかいウロコ", "おとしもの", "リニアパス", "きかいのぶひん", "ぎんいろのはね", "にじいろのはね", "ふしぎなタマゴ", "あかぼんぐり", "きぼんぐり", "あおぼんぐり", "みどぼんぐり", "ももぼんぐり", "しろぼんぐり", "くろぼんぐり", "スピードボール", "レベルボール", "ルアーボール", "ヘビーボール", "ラブラブボール", "フレンドボール", "ムーンボール", "コンペボール", "パークボール", "フォトアルバム", "ＧＢプレイヤー", "うみなりのスズ", "いかりまんじゅう", "データカード０１", "データカード０２", "データカード０３", "データカード０４", "データカード０５", "データカード０６", "データカード０７", "データカード０８", "データカード０９", "データカード１０", "データカード１１", "データカード１２", "データカード１３", "データカード１４", "データカード１５", "データカード１６", "データカード１７", "データカード１８", "データカード１９", "データカード２０", "データカード２１", "データカード２２", "データカード２３", "データカード２４", "データカード２５", "データカード２６", "データカード２７", "もえぎいろのたま", "ロックカプセル", "べにいろのたま", "あいいろのたま", "なぞのすいしょう"];
exports.MOVE_NAMES = ["はたく", "からてチョップ", "おうふくビンタ", "れんぞくパンチ", "メガトンパンチ", "ネコにこばん", "ほのおのパンチ", "れいとうパンチ", "かみなりパンチ", "ひっかく", "はさむ", "ハサミギロチン", "かまいたち", "つるぎのまい", "いあいぎり", "かぜおこし", "つばさでうつ", "ふきとばし", "そらをとぶ", "しめつける", "たたきつける", "つるのムチ", "ふみつけ", "にどげり", "メガトンキック", "とびげり", "まわしげり", "すなかけ", "ずつき", "つのでつく", "みだれづき", "つのドリル", "たいあたり", "のしかかり", "まきつく", "とっしん", "あばれる", "すてみタックル", "しっぽをふる", "どくばり", "ダブルニードル", "ミサイルばり", "にらみつける", "かみつく", "なきごえ", "ほえる", "うたう", "ちょうおんぱ", "ソニックブーム", "かなしばり", "ようかいえき", "ひのこ", "かえんほうしゃ", "しろいきり", "みずでっぽう", "ハイドロポンプ", "なみのり", "れいとうビーム", "ふぶき", "サイケこうせん", "バブルこうせん", "オーロラビーム", "はかいこうせん", "つつく", "ドリルくちばし", "じごくぐるま", "けたぐり", "カウンター", "ちきゅうなげ", "かいりき", "すいとる", "メガドレイン", "やどりぎのタネ", "せいちょう", "はっぱカッター", "ソーラービーム", "どくのこな", "しびれごな", "ねむりごな", "はなびらのまい", "いとをはく", "りゅうのいかり", "ほのおのうず", "でんきショック", "10まんボルト", "でんじは", "かみなり", "いわおとし", "じしん", "じわれ", "あなをほる", "どくどく", "ねんりき", "サイコキネシス", "さいみんじゅつ", "ヨガのポーズ", "こうそくいどう", "でんこうせっか", "いかり", "テレポート", "ナイトヘッド", "ものまね", "いやなおと", "かげぶんしん", "じこさいせい", "かたくなる", "ちいさくなる", "えんまく", "あやしいひかり", "からにこもる", "まるくなる", "バリアー", "ひかりのかべ", "くろいきり", "リフレクター", "きあいだめ", "がまん", "ゆびをふる", "オウムがえし", "じばく", "タマゴばくだん", "したでなめる", "スモッグ", "ヘドロこうげき", "ホネこんぼう", "だいもんじ", "たきのぼり", "からではさむ", "スピードスター", "ロケットずつき", "とげキャノン", "からみつく", "ドわすれ", "スプーンまげ", "タマゴうみ", "とびひざげり", "へびにらみ", "ゆめくい", "どくガス", "たまなげ", "きゅうけつ", "あくまのキッス", "ゴッドバード", "へんしん", "あわ", "ピヨピヨパンチ", "キノコのほうし", "フラッシュ", "サイコウェーブ", "はねる", "とける", "クラブハンマー", "だいばくはつ", "みだれひっかき", "ホネブーメラン", "ねむる", "いわなだれ", "ひっさつまえば", "かくばる", "テクスチャー", "トライアタック", "いかりのまえば", "きりさく", "みがわり", "わるあがき", "スケッチ", "トリプルキック", "どろぼう", "クモのす", "こころのめ", "あくむ", "かえんぐるま", "いびき", "のろい", "じたばた", "テクスチャー2", "エアロブラスト", "わたほうし", "きしかいせい", "うらみ", "こなゆき", "まもる", "マッハパンチ", "こわいかお", "だましうち", "てんしのキッス", "はらだいこ", "ヘドロばくだん", "どろかけ", "オクタンほう", "まきびし", "でんじほう", "みやぶる", "みちづれ", "ほろびのうた", "こごえるかぜ", "みきり", "ボーンラッシュ", "ロックオン", "げきりん", "すなあらし", "ギガドレイン", "こらえる", "あまえる", "ころがる", "みねうち", "いばる", "ミルクのみ", "スパーク", "れんぞくぎり", "はがねのつばさ", "くろいまなざし", "メロメロ", "ねごと", "いやしのすず", "おんがえし", "プレゼント", "やつあたり", "しんぴのまもり", "いたみわけ", "せいなるほのお", "マグニチュード", "ばくれつパンチ", "メガホーン", "りゅうのいぶき", "バトンタッチ", "アンコール", "おいうち", "こうそくスピン", "あまいかおり", "アイアンテール", "メタルクロー", "あてみなげ", "あさのひざし", "こうごうせい", "つきのひかり", "めざめるパワー", "クロスチョップ", "たつまき", "あまごい", "にほんばれ", "かみくだく", "ミラーコート", "じこあんじ", "しんそく", "げんしのちから", "シャドーボール", "みらいよち", "いわくだき", "うずしお", "ふくろだたき", "ねこだまし", "さわぐ", "たくわえる", "はきだす", "のみこむ", "ねっぷう", "あられ", "いちゃもん", "おだてる", "おにび", "おきみやげ", "からげんき", "きあいパンチ", "きつけ", "このゆびとまれ", "しぜんのちから", "じゅうでん", "ちょうはつ", "てだすけ", "トリック", "なりきり", "ねがいごと", "ねこのて", "ねをはる", "ばかぢから", "マジックコート", "リサイクル", "リベンジ", "かわらわり", "あくび", "はたきおとす", "がむしゃら", "ふんか", "スキルスワップ", "ふういん", "リフレッシュ", "おんねん", "よこどり", "ひみつのちから", "ダイビング", "つっぱり", "ほごしょく", "ほたるび", "ラスターパージ", "ミストボール", "フェザーダンス", "フラフラダンス", "ブレイズキック", "どろあそび", "アイスボール", "ニードルアーム", "なまける", "ハイパーボイス", "どくどくのキバ", "ブレイククロー", "ブラストバーン", "ハイドロカノン", "コメットパンチ", "おどろかす", "ウェザーボール", "アロマセラピー", "うそなき", "エアカッター", "オーバーヒート", "かぎわける", "がんせきふうじ", "ぎんいろのかぜ", "きんぞくおん", "くさぶえ", "くすぐる", "コスモパワー", "しおふき", "シグナルビーム", "シャドーパンチ", "じんつうりき", "スカイアッパー", "すなじごく", "ぜったいれいど", "だくりゅう", "タネマシンガン", "つばめがえし", "つららばり", "てっぺき", "とおせんぼう", "とおぼえ", "ドラゴンクロー", "ハードプラント", "ビルドアップ", "とびはねる", "マッドショット", "ポイズンテール", "ほしがる", "ボルテッカー", "マジカルリーフ", "みずあそび", "めいそう", "リーフブレード", "りゅうのまい", "ロックブラスト", "でんげきは", "みずのはどう", "はめつのねがい", "サイコブースト", "はねやすめ", "じゅうりょく", "ミラクルアイ", "めざましビンタ", "アームハンマー", "ジャイロボール", "いやしのねがい", "しおみず", "しぜんのめぐみ", "フェイント", "ついばむ", "おいかぜ", "つぼをつく", "メタルバースト", "とんぼがえり", "インファイト", "しっぺがえし", "ダメおし", "さしおさえ", "なげつける", "サイコシフト", "きりふだ", "かいふくふうじ", "しぼりとる", "パワートリック", "いえき", "おまじない", "さきどり", "まねっこ", "パワースワップ", "ガードスワップ", "おしおき", "とっておき", "なやみのタネ", "ふいうち", "どくびし", "ハートスワップ", "アクアリング", "でんじふゆう", "フレアドライブ", "はっけい", "はどうだん", "ロックカット", "どくづき", "あくのはどう", "つじぎり", "アクアテール", "タネばくだん", "エアスラッシュ", "シザークロス", "むしのさざめき", "りゅうのはどう", "ドラゴンダイブ", "パワージェム", "ドレインパンチ", "しんくうは", "きあいだま", "エナジーボール", "ブレイブバード", "だいちのちから", "すりかえ", "ギガインパクト", "わるだくみ", "バレットパンチ", "ゆきなだれ", "こおりのつぶて", "シャドークロー", "かみなりのキバ", "こおりのキバ", "ほのおのキバ", "かげうち", "どろばくだん", "サイコカッター", "しねんのずつき", "ミラーショット", "ラスターカノン", "ロッククライム", "きりばらい", "トリックルーム", "りゅうせいぐん", "ほうでん", "ふんえん", "リーフストーム", "パワーウィップ", "がんせきほう", "クロスポイズン", "ダストシュート", "アイアンヘッド", "マグネットボム", "ストーンエッジ", "ゆうわく", "ステルスロック", "くさむすび", "おしゃべり", "さばきのつぶて", "むしくい", "チャージビーム", "ウッドハンマー", "アクアジェット", "こうげきしれい", "ぼうぎょしれい", "かいふくしれい", "もろはのずつき", "ダブルアタック", "ときのほうこう", "あくうせつだん", "みかづきのまい", "にぎりつぶす", "マグマストーム", "ダークホール", "シードフレア", "あやしいかぜ", "シャドーダイブ"];
exports.FACTORY_DATA = [
    [1, 15, 213, 344, 91, 72, 229, 'CD'],
    [4, 3, 232, 423, 231, 107, 183, 'AS'],
    [7, 3, 254, 452, 43, 109, 181, 'HA'],
    [152, 3, 255, 330, 289, 44, 112, 'HA'],
    [155, 3, 217, 171, 23, 128, 107, 'AD'],
    [158, 3, 326, 290, 162, 102, 183, 'AB'],
    [252, 10, 239, 71, 128, 147, 103, 'CS'],
    [255, 6, 249, 51, 118, 188, 103, 'AC'],
    [258, 15, 243, 351, 195, 188, 44, 'HC'],
    [387, 3, 184, 74, 43, 320, 109, 'HA'],
    [390, 3, 185, 171, 262, 42, 251, 'AS'],
    [393, 18, 187, 60, 331, 44, 47, 'AC'],
    [401, 7, 201, 449, 116, 188, 44, 'HBD'],
    [440, 3, 158, 216, 185, 382, 203, 'HB'],
    [412, 3, 158, 449, 32, 172, 181, 'HA'],
    [292, 3, 255, 424, 209, 108, 27, 'AS'],
    [396, 3, 244, 16, 97, 282, 44, 'AS'],
    [415, 12, 222, 449, 15, 465, 229, 'ACS'],
    [399, 3, 251, 28, 364, 44, 280, 'HA'],
    [403, 3, 221, 421, 43, 335, 42, 'HA'],
    [420, 15, 318, 344, 91, 72, 269, 'CD'],
    [406, 20, 296, 71, 91, 73, 387, 'CD'],
    [433, 15, 248, 92, 128, 49, 44, 'CD'],
    [447, 3, 268, 279, 417, 192, 67, 'AS'],
    [438, 3, 315, 156, 66, 382, 200, 'AB'],
    [353, 3, 247, 424, 281, 260, 287, 'HA'],
    [355, 3, 247, 424, 219, 260, 108, 'BD'],
    [37, 20, 213, 51, 128, 260, 108, 'CD'],
    [25, 15, 158, 83, 128, 85, 103, 'CS'],
    [27, 3, 237, 90, 316, 200, 27, 'AB'],
    [74, 3, 230, 221, 349, 69, 181, 'AB'],
    [147, 15, 149, 238, 351, 85, 47, 'CD'],
    [209, 3, 326, 28, 43, 206, 183, 'HA'],
    [223, 15, 204, 60, 61, 188, 47, 'CS'],
    [246, 3, 201, 156, 90, 43, 183, 'HA'],
    [343, 15, 248, 59, 188, 245, 112, 'CD'],
    [361, 3, 221, 422, 28, 43, 181, 'HA'],
    [371, 4, 250, 224, 28, 279, 183, 'AB'],
    [436, 2, 314, 92, 359, 245, 285, 'AC'],
    [443, 3, 237, 81, 327, 231, 200, 'HA'],
    [453, 3, 281, 397, 357, 268, 206, 'HA'],
    [48, 7, 222, 449, 76, 59, 47, 'HC'],
    [66, 3, 232, 1, 316, 192, 183, 'HA'],
    [238, 16, 213, 92, 195, 251, 185, 'CS'],
    [318, 3, 149, 452, 43, 183, 206, 'HA'],
    [322, 12, 255, 221, 51, 316, 200, 'AC'],
    [341, 2, 151, 60, 10, 281, 206, 'HC'],
    [84, 13, 201, 331, 97, 184, 366, 'AS'],
    [333, 15, 219, 313, 128, 118, 212, 'CD'],
    [431, 13, 326, 153, 251, 184, 212, 'AS'],
    [439, 5, 255, 382, 92, 111, 112, 'CD'],
    [79, 15, 149, 351, 92, 49, 280, 'HC'],
    [43, 5, 318, 71, 50, 229, 235, 'CD'],
    [54, 15, 150, 54, 92, 345, 49, 'HC'],
    [104, 3, 237, 124, 28, 279, 42, 'AB'],
    [118, 15, 204, 351, 59, 47, 239, 'BC'],
    [177, 10, 248, 100, 313, 465, 247, 'CS'],
    [35, 3, 213, 357, 265, 226, 46, 'HA'],
    [81, 5, 152, 350, 428, 318, 114, 'BC'],
    [86, 3, 153, 452, 419, 251, 226, 'AD'],
    [88, 3, 281, 91, 424, 150, 106, 'HA'],
    [98, 17, 151, 60, 10, 42, 181, 'BC'],
    [102, 15, 314, 92, 446, 72, 112, 'BC'],
    [133, 13, 203, 35, 43, 174, 202, 'AS'],
    [422, 5, 255, 351, 188, 195, 105, 'HC'],
    [96, 15, 152, 59, 273, 49, 111, 'CD'],
    [434, 3, 240, 227, 91, 162, 107, 'AS'],
    [100, 15, 204, 350, 128, 85, 112, 'CS'],
    [170, 15, 242, 350, 60, 195, 85, 'HC'],
    [216, 8, 150, 289, 184, 212, 155, 'HA'],
    [225, 3, 246, 216, 300, 331, 257, 'AS'],
    [228, 3, 249, 423, 43, 45, 260, 'AS'],
    [231, 3, 277, 204, 316, 110, 200, 'HA'],
    [304, 8, 233, 231, 316, 333, 181, 'AB'],
    [325, 15, 158, 148, 128, 276, 108, 'CD'],
    [370, 10, 285, 351, 212, 185, 239, 'CS'],
    [418, 13, 317, 452, 97, 227, 44, 'AS'],
    [449, 3, 150, 90, 316, 327, 280, 'HA'],
    [451, 8, 245, 304, 449, 43, 389, 'AB'],
    [456, 15, 317, 351, 317, 212, 391, 'CD'],
    [459, 3, 246, 7, 74, 319, 274, 'HA'],
    [72, 15, 149, 60, 50, 47, 111, 'CD'],
    [331, 3, 153, 301, 184, 177, 319, 'HA'],
    [109, 15, 245, 123, 59, 107, 179, 'BC'],
    [120, 10, 149, 60, 238, 128, 112, 'CS'],
    [188, 6, 296, 71, 331, 92, 177, 'AC'],
    [271, 17, 285, 351, 71, 251, 239, 'CD'],
    [274, 3, 153, 74, 184, 206, 105, 'HA'],
    [329, 15, 153, 224, 188, 465, 47, 'CS'],
    [397, 3, 244, 282, 16, 97, 17, 'AS'],
    [111, 3, 156, 90, 349, 183, 38, 'HAB'],
    [366, 5, 227, 249, 91, 333, 181, 'HB'],
    [458, 6, 243, 60, 331, 195, 96, 'CD'],
    [425, 15, 204, 465, 313, 195, 260, 'HC'],
    [17, 3, 152, 16, 97, 296, 118, 'AS'],
    [58, 3, 249, 423, 43, 45, 96, 'HA'],
    [408, 23, 315, 316, 227, 183, 42, 'BD'],
    [410, 22, 230, 441, 316, 206, 333, 'AB'],
    [427, 3, 241, 145, 408, 97, 192, 'AS'],
    [83, 3, 259, 162, 313, 281, 13, 'AD'],
    [138, 5, 151, 245, 54, 340, 181, 'BC'],
    [140, 3, 201, 452, 316, 281, 318, 'AB'],
    [345, 20, 255, 245, 446, 274, 108, 'HBD'],
    [347, 3, 277, 209, 349, 231, 181, 'AS'],
    [190, 3, 251, 457, 368, 85, 251, 'AS'],
    [239, 13, 149, 8, 1, 97, 112, 'AS'],
    [294, 3, 156, 22, 43, 335, 47, 'HA'],
    [327, 3, 251, 145, 408, 184, 297, 'HA'],
    [206, 3, 326, 28, 43, 179, 136, 'HA'],
    [30, 3, 245, 304, 23, 43, 259, 'HA'],
    [33, 3, 230, 91, 23, 262, 259, 'HA'],
    [180, 15, 269, 350, 128, 85, 112, 'HC'],
    [240, 3, 151, 6, 182, 42, 107, 'AS'],
    [299, 15, 238, 245, 350, 85, 200, 'BC'],
    [222, 15, 230, 60, 245, 242, 111, 'CD'],
    [301, 3, 158, 289, 184, 251, 192, 'HA'],
    [302, 8, 240, 184, 424, 251, 196, 'AB'],
    [303, 8, 213, 441, 43, 320, 333, 'HB'],
    [402, 3, 277, 209, 248, 281, 115, 'HA'],
    [12, 15, 151, 317, 313, 59, 365, 'CD'],
    [15, 13, 232, 40, 91, 371, 96, 'AD'],
    [61, 0, 201, 60, 2, 53, 239, 'AC'],
    [95, 3, 238, 156, 90, 102, 200, 'AB'],
    [108, 3, 150, 289, 316, 121, 102, 'HA'],
    [267, 15, 222, 317, 313, 71, 212, 'CS'],
    [269, 15, 222, 317, 91, 59, 17, 'CD'],
    [70, 17, 232, 74, 50, 34, 229, 'AC'],
    [75, 3, 230, 221, 316, 445, 110, 'AB'],
    [166, 10, 326, 317, 313, 96, 225, 'CD'],
    [168, 3, 222, 449, 91, 424, 168, 'HA'],
    [193, 10, 255, 317, 313, 103, 196, 'CS'],
    [446, 7, 158, 117, 277, 253, 255, 'BD'],
    [44, 15, 239, 71, 50, 77, 235, 'HC'],
    [137, 15, 156, 128, 59, 195, 277, 'HC'],
    [351, 10, 156, 310, 240, 239, 257, 'CS'],
    [313, 13, 201, 368, 97, 108, 269, 'AS'],
    [314, 10, 204, 317, 128, 272, 269, 'CS'],
    [315, 15, 281, 71, 91, 319, 177, 'CD'],
    [320, 15, 254, 351, 195, 45, 53, 'CS'],
    [47, 13, 153, 449, 446, 9, 77, 'DS'],
    [441, 20, 156, 447, 128, 46, 118, 'DS'],
    [93, 10, 156, 100, 91, 108, 287, 'CS'],
    [176, 20, 150, 313, 128, 344, 272, 'CD'],
    [198, 13, 240, 184, 16, 258, 268, 'AS'],
    [202, 13, 230, 67, 242, 203, 149, 'BDS'],
    [311, 10, 204, 350, 128, 312, 269, 'CS'],
    [312, 10, 203, 350, 128, 226, 269, 'CS'],
    [417, 13, 242, 208, 97, 43, 185, 'AS'],
    [77, 3, 150, 171, 22, 260, 38, 'AS'],
    [184, 17, 151, 60, 204, 110, 38, 'CD'],
    [2, 23, 203, 74, 76, 35, 72, 'AD'],
    [5, 4, 326, 423, 162, 107, 183, 'AS'],
    [8, 3, 230, 452, 43, 228, 280, 'HA'],
    [153, 15, 158, 344, 245, 218, 112, 'HC'],
    [156, 3, 150, 171, 23, 97, 107, 'AS'],
    [159, 12, 232, 351, 162, 43, 183, 'AC'],
    [253, 10, 192, 344, 128, 188, 196, 'CS'],
    [256, 3, 201, 6, 23, 97, 27, 'HA'],
    [259, 15, 230, 340, 351, 245, 44, 'CD'],
    [388, 7, 296, 74, 43, 72, 234, 'AB'],
    [391, 3, 192, 182, 171, 153, 268, 'AS'],
    [394, 17, 186, 60, 231, 63, 103, 'CD'],
    [185, 8, 238, 156, 184, 200, 334, 'AB'],
    [219, 15, 255, 435, 245, 150, 200, 'HC'],
    [247, 3, 238, 316, 90, 183, 200, 'HA'],
    [364, 7, 282, 61, 351, 226, 257, 'HC'],
    [400, 24, 189, 28, 351, 97, 44, 'AC'],
    [444, 3, 188, 81, 327, 162, 27, 'AS'],
    [67, 3, 230, 1, 316, 192, 183, 'HA'],
    [20, 13, 251, 282, 227, 97, 183, 'AS'],
    [284, 5, 222, 317, 313, 229, 183, 'BC'],
    [162, 13, 201, 162, 388, 269, 273, 'AS'],
    [404, 3, 242, 421, 43, 147, 206, 'HA'],
    [421, 5, 156, 344, 72, 319, 234, 'DS'],
    [148, 15, 149, 224, 351, 85, 218, 'CD'],
    [262, 13, 327, 43, 304, 335, 45, 'AS'],
    [264, 13, 206, 162, 420, 342, 320, 'AS'],
    [64, 10, 248, 92, 271, 49, 247, 'DS'],
    [372, 17, 153, 224, 28, 181, 183, 'AC'],
    [375, 0, 150, 231, 92, 392, 183, 'AC'],
    [413, 3, 192, 74, 449, 181, 444, 'AD'],
    [414, 15, 204, 317, 313, 76, 444, 'HC'],
    [40, 3, 251, 289, 446, 272, 46, 'HA'],
    [192, 20, 156, 71, 274, 72, 112, 'CD'],
    [358, 20, 151, 148, 195, 214, 218, 'CD'],
    [207, 3, 326, 331, 327, 231, 13, 'AB'],
    [211, 18, 149, 60, 91, 41, 105, 'AC'],
    [215, 13, 156, 184, 419, 42, 268, 'AS'],
    [277, 13, 221, 364, 97, 115, 44, 'AS'],
    [279, 15, 150, 351, 313, 253, 255, 'BC'],
    [305, 8, 233, 231, 316, 333, 181, 'AB'],
    [114, 5, 151, 71, 245, 91, 19, 'BC'],
    [200, 20, 149, 465, 219, 108, 85, 'CD'],
    [24, 3, 156, 304, 43, 379, 136, 'HA'],
    [53, 13, 251, 162, 368, 444, 206, 'AS'],
    [117, 5, 326, 60, 61, 107, 239, 'BC'],
    [288, 3, 230, 162, 227, 226, 67, 'HA'],
    [337, 15, 158, 245, 92, 321, 114, 'CD'],
    [338, 3, 158, 148, 316, 321, 112, 'AB'],
    [352, 23, 206, 162, 424, 38, 276, 'AD'],
    [479, 15, 149, 83, 309, 85, 108, 'CS'],
    [22, 3, 244, 364, 262, 44, 42, 'AS'],
    [164, 3, 156, 289, 331, 47, 114, 'HA'],
    [28, 3, 158, 90, 316, 110, 200, 'AB'],
    [49, 10, 281, 317, 59, 78, 212, 'CS'],
    [113, 22, 158, 117, 286, 110, 106, 'HD'],
    [119, 15, 151, 351, 59, 47, 239, 'HC'],
    [189, 13, 151, 331, 330, 177, 38, 'AS'],
    [221, 15, 246, 195, 425, 53, 257, 'HC'],
    [432, 3, 251, 162, 184, 212, 44, 'AS'],
    [455, 3, 239, 74, 43, 229, 274, 'HA'],
    [42, 13, 193, 331, 91, 210, 108, 'AS'],
    [57, 13, 232, 1, 153, 192, 115, 'AS'],
    [106, 23, 241, 26, 262, 192, 115, 'AD'],
    [107, 3, 221, 182, 417, 169, 67, 'AD'],
    [203, 15, 204, 59, 128, 225, 96, 'CS'],
    [237, 3, 201, 166, 182, 196, 115, 'HA'],
    [354, 3, 152, 424, 281, 260, 179, 'HA'],
    [356, 8, 152, 424, 219, 260, 108, 'BD'],
    [291, 3, 150, 449, 331, 27, 225, 'HA'],
    [335, 3, 156, 9, 227, 196, 42, 'AS'],
    [336, 3, 232, 341, 121, 281, 136, 'HA'],
    [85, 13, 153, 364, 30, 44, 366, 'AS'],
    [319, 0, 149, 351, 43, 183, 115, 'CS'],
    [323, 2, 230, 221, 260, 316, 132, 'HA'],
    [357, 3, 206, 74, 331, 72, 444, 'HA'],
    [457, 18, 186, 54, 368, 444, 212, 'AC'],
    [82, 24, 204, 350, 442, 85, 47, 'AC'],
    [226, 0, 243, 60, 16, 96, 47, 'AC'],
    [234, 3, 201, 22, 43, 285, 108, 'AS'],
    [317, 15, 255, 123, 253, 255, 254, 'HBD'],
    [342, 15, 156, 60, 398, 105, 268, 'BC'],
    [18, 3, 149, 16, 262, 365, 27, 'AS'],
    [178, 13, 244, 427, 364, 365, 247, 'AS'],
    [324, 5, 204, 51, 188, 122, 132, 'BC'],
    [326, 20, 204, 59, 446, 247, 108, 'CD'],
    [36, 18, 150, 117, 103, 114, 265, 'BD'],
    [99, 17, 186, 60, 10, 105, 299, 'BC'],
    [332, 3, 189, 330, 184, 190, 274, 'HA'],
    [182, 15, 204, 344, 50, 320, 77, 'HC'],
    [224, 15, 186, 189, 195, 85, 115, 'HC'],
    [367, 24, 243, 351, 43, 102, 239, 'AB'],
    [368, 5, 317, 351, 92, 239, 391, 'HB'],
    [369, 7, 317, 351, 316, 299, 105, 'BC'],
    [125, 10, 206, 350, 128, 85, 112, 'CS'],
    [126, 13, 206, 6, 182, 107, 260, 'AS'],
    [139, 2, 277, 54, 204, 109, 190, 'AB'],
    [141, 8, 254, 452, 316, 105, 318, 'AB'],
    [123, 13, 277, 209, 16, 112, 42, 'HS'],
    [91, 5, 246, 61, 351, 190, 47, 'BC'],
    [2, 15, 296, 201, 187, 78, 72, 'CD'],
    [5, 18, 326, 52, 420, 331, 107, 'AS'],
    [8, 12, 253, 56, 57, 279, 251, 'HC'],
    [153, 6, 150, 201, 33, 319, 155, 'BCD'],
    [156, 12, 230, 52, 305, 97, 107, 'AC'],
    [159, 3, 230, 400, 241, 156, 183, 'AB'],
    [253, 3, 192, 347, 156, 241, 102, 'AS'],
    [256, 6, 232, 52, 326, 162, 27, 'AC'],
    [259, 17, 156, 329, 88, 245, 181, 'AC'],
    [388, 2, 184, 401, 241, 173, 234, 'AB'],
    [391, 3, 232, 298, 279, 156, 258, 'AS'],
    [394, 18, 230, 56, 64, 231, 239, 'AC'],
    [185, 3, 270, 443, 88, 101, 119, 'AB'],
    [219, 17, 217, 314, 156, 88, 33, 'AC'],
    [247, 3, 237, 88, 156, 241, 183, 'HA'],
    [364, 17, 150, 57, 56, 323, 257, 'HC'],
    [400, 3, 253, 157, 161, 364, 212, 'HA'],
    [444, 3, 266, 336, 88, 162, 200, 'AS'],
    [67, 3, 232, 237, 262, 156, 67, 'HA'],
    [20, 18, 189, 161, 157, 246, 183, 'ACS'],
    [284, 17, 204, 404, 402, 246, 77, 'CD'],
    [162, 3, 220, 217, 420, 270, 273, 'AS'],
    [404, 15, 204, 84, 323, 128, 85, 'HC'],
    [421, 15, 271, 75, 72, 240, 234, 'HC'],
    [148, 24, 197, 405, 400, 20, 348, 'AC'],
    [262, 3, 189, 241, 35, 388, 335, 'AB'],
    [264, 13, 287, 217, 420, 90, 414, 'AS'],
    [64, 15, 149, 93, 246, 350, 114, 'CS'],
    [372, 3, 230, 336, 241, 348, 183, 'AB'],
    [375, 3, 191, 308, 427, 417, 183, 'HA'],
    [413, 15, 192, 201, 323, 93, 212, 'BC'],
    [414, 15, 192, 404, 402, 93, 76, 'HC'],
    [40, 15, 158, 303, 246, 46, 137, 'HC'],
    [192, 15, 158, 201, 187, 319, 103, 'HC'],
    [358, 17, 248, 93, 246, 94, 137, 'HC'],
    [207, 3, 217, 88, 331, 400, 200, 'AS'],
    [211, 3, 230, 400, 397, 278, 193, 'AB'],
    [215, 13, 221, 7, 184, 305, 179, 'AS'],
    [277, 3, 272, 262, 331, 44, 368, 'AS'],
    [279, 15, 253, 56, 313, 57, 365, 'BC'],
    [305, 8, 158, 441, 156, 88, 45, 'AB'],
    [114, 5, 151, 201, 187, 377, 274, 'BC'],
    [200, 15, 196, 246, 93, 85, 108, 'CS'],
    [24, 24, 193, 187, 425, 241, 136, 'AC'],
    [53, 3, 326, 162, 420, 43, 251, 'AS'],
    [117, 15, 253, 56, 57, 238, 107, 'BC'],
    [288, 3, 203, 305, 420, 178, 202, 'AS'],
    [337, 15, 185, 93, 245, 246, 321, 'CD'],
    [338, 3, 185, 427, 156, 260, 321, 'AB'],
    [352, 23, 287, 217, 420, 331, 270, 'AD'],
    [479, 15, 242, 434, 465, 85, 103, 'CS'],
    [22, 3, 149, 64, 217, 184, 368, 'AS'],
    [164, 17, 156, 402, 128, 93, 114, 'HC'],
    [28, 3, 217, 88, 156, 305, 200, 'AB'],
    [49, 15, 222, 404, 187, 93, 47, 'CS'],
    [113, 8, 256, 120, 263, 46, 134, 'HD'],
    [119, 3, 217, 400, 397, 262, 391, 'HA'],
    [189, 3, 158, 401, 339, 78, 234, 'AS'],
    [221, 3, 266, 422, 88, 443, 173, 'HA'],
    [432, 3, 201, 33, 420, 212, 251, 'AS'],
    [455, 3, 184, 401, 377, 241, 274, 'HA'],
    [42, 3, 281, 304, 331, 427, 108, 'AS'],
    [57, 3, 268, 237, 88, 156, 206, 'AS'],
    [106, 3, 203, 135, 298, 24, 202, 'ADS'],
    [107, 3, 221, 326, 4, 417, 67, 'ADS'],
    [203, 3, 326, 427, 457, 241, 85, 'AS'],
    [237, 3, 266, 166, 417, 331, 67, 'HA'],
    [354, 3, 198, 420, 184, 260, 432, 'HA'],
    [356, 8, 198, 324, 370, 279, 108, 'HBD'],
    [291, 3, 327, 403, 331, 399, 225, 'HA'],
    [335, 3, 326, 305, 420, 331, 268, 'AS'],
    [336, 3, 281, 187, 241, 400, 206, 'HA'],
    [85, 13, 221, 64, 217, 184, 366, 'AS'],
    [319, 3, 186, 241, 126, 422, 206, 'AS'],
    [323, 15, 217, 413, 283, 245, 200, 'HC'],
    [357, 15, 184, 201, 402, 234, 240, 'HC'],
    [457, 15, 253, 56, 317, 212, 391, 'CS'],
    [82, 15, 191, 84, 428, 85, 392, 'BC'],
    [226, 15, 253, 56, 313, 57, 108, 'CD'],
    [234, 3, 189, 217, 427, 85, 108, 'AS'],
    [317, 15, 281, 187, 246, 201, 280, 'HC'],
    [342, 3, 217, 151, 241, 403, 13, 'AB'],
    [18, 3, 326, 215, 331, 210, 368, 'AS'],
    [178, 15, 198, 93, 313, 465, 108, 'CS'],
    [324, 5, 217, 256, 75, 413, 240, 'BC'],
    [326, 20, 198, 93, 407, 450, 242, 'CD'],
    [36, 3, 230, 215, 308, 427, 46, 'HA'],
    [99, 13, 203, 151, 11, 174, 202, 'AS'],
    [332, 15, 253, 201, 398, 50, 177, 'HC'],
    [182, 15, 213, 75, 187, 240, 234, 'HC'],
    [224, 15, 270, 189, 52, 93, 85, 'HC'],
    [367, 3, 253, 400, 241, 422, 239, 'AB'],
    [368, 15, 253, 56, 93, 57, 239, 'BC'],
    [369, 8, 150, 400, 156, 155, 280, 'AB'],
    [125, 15, 213, 84, 93, 410, 85, 'CS'],
    [126, 15, 255, 52, 93, 410, 108, 'CS'],
    [139, 15, 158, 56, 443, 57, 389, 'BC'],
    [141, 3, 326, 126, 156, 162, 13, 'AB'],
    [123, 3, 213, 403, 331, 399, 13, 'AS'],
    [91, 8, 234, 418, 290, 91, 181, 'AB'],
    [3, 15, 214, 436, 187, 132, 78, 'CD'],
    [6, 15, 204, 52, 402, 107, 183, 'CS'],
    [9, 15, 243, 55, 323, 195, 242, 'BCD'],
    [154, 15, 284, 75, 245, 234, 240, 'BD'],
    [157, 3, 232, 6, 8, 420, 97, 'AS'],
    [160, 3, 221, 126, 422, 156, 183, 'AB'],
    [254, 13, 201, 347, 241, 97, 102, 'AS'],
    [257, 3, 203, 298, 178, 331, 202, 'AS'],
    [260, 3, 253, 126, 88, 7, 181, 'HA'],
    [389, 3, 188, 88, 446, 156, 173, 'HA'],
    [392, 13, 192, 369, 6, 368, 251, 'AS'],
    [395, 3, 326, 126, 231, 279, 281, 'AD'],
    [51, 13, 286, 88, 156, 309, 327, 'AS'],
    [105, 3, 326, 197, 279, 230, 200, 'AB'],
    [308, 13, 203, 427, 178, 202, 251, 'AS'],
    [195, 3, 187, 88, 400, 279, 67, 'HA'],
    [210, 3, 326, 215, 156, 241, 85, 'HA'],
    [124, 20, 150, 93, 57, 141, 312, 'CD'],
    [122, 20, 149, 93, 323, 382, 101, 'CD'],
    [171, 15, 187, 56, 434, 85, 391, 'HC'],
    [286, 8, 275, 401, 326, 156, 67, 'AB'],
    [205, 2, 184, 359, 449, 278, 67, 'AB'],
    [227, 8, 184, 64, 210, 190, 45, 'AB'],
    [359, 13, 189, 388, 262, 103, 268, 'AS'],
    [340, 15, 253, 56, 413, 195, 132, 'HC'],
    [297, 3, 156, 291, 88, 262, 251, 'HA'],
    [416, 15, 232, 317, 313, 465, 206, 'BD'],
    [26, 3, 265, 8, 230, 20, 97, 'AS'],
    [87, 23, 327, 126, 418, 28, 251, 'AD'],
    [310, 3, 191, 421, 241, 45, 85, 'AS'],
    [398, 13, 221, 215, 331, 103, 354, 'AS'],
    [423, 23, 275, 126, 88, 104, 242, 'HD'],
    [435, 3, 326, 388, 397, 162, 102, 'HA'],
    [45, 15, 296, 201, 187, 78, 274, 'BC'],
    [71, 15, 193, 436, 187, 78, 379, 'HC'],
    [101, 15, 150, 84, 128, 85, 112, 'CS'],
    [272, 3, 266, 126, 74, 408, 13, 'AD'],
    [275, 13, 156, 401, 184, 403, 251, 'AS'],
    [295, 15, 189, 303, 325, 351, 258, 'HC'],
    [362, 2, 278, 418, 370, 359, 419, 'HBD'],
    [428, 13, 230, 215, 408, 203, 242, 'AS'],
    [478, 10, 149, 57, 465, 108, 212, 'CS'],
    [424, 13, 266, 457, 420, 279, 281, 'AS'],
    [97, 2, 278, 426, 373, 94, 432, 'AD'],
    [76, 8, 230, 88, 156, 388, 200, 'AB'],
    [112, 3, 185, 88, 156, 241, 183, 'AB'],
    [80, 5, 150, 93, 56, 346, 280, 'BC'],
    [110, 5, 193, 187, 398, 350, 287, 'BC'],
    [115, 13, 203, 37, 241, 178, 202, 'AS'],
    [128, 13, 156, 36, 427, 227, 183, 'AS'],
    [65, 10, 213, 93, 246, 346, 247, 'CS'],
    [199, 17, 253, 93, 361, 280, 432, 'HBD'],
    [241, 8, 149, 215, 441, 85, 207, 'AB'],
    [334, 23, 150, 336, 331, 348, 155, 'AD'],
    [454, 3, 281, 397, 279, 403, 281, 'AS'],
    [460, 20, 157, 201, 57, 351, 319, 'HC'],
    [31, 3, 193, 88, 304, 331, 203, 'HA'],
    [34, 8, 230, 88, 397, 23, 67, 'HA'],
    [346, 8, 326, 245, 411, 108, 200, 'HBD'],
    [348, 3, 326, 403, 156, 88, 333, 'AD'],
    [411, 8, 230, 441, 443, 206, 268, 'BD'],
    [419, 13, 158, 126, 7, 97, 239, 'AS'],
    [429, 15, 196, 246, 407, 344, 261, 'CS'],
    [426, 15, 203, 465, 313, 225, 202, 'HC'],
    [55, 15, 187, 56, 93, 108, 346, 'HC'],
    [62, 15, 187, 56, 409, 93, 103, 'HC'],
    [78, 15, 150, 125, 75, 240, 155, 'CS'],
    [89, 3, 281, 397, 424, 106, 150, 'HA'],
    [94, 10, 193, 246, 187, 179, 108, 'CS'],
    [181, 15, 191, 84, 407, 112, 85, 'CD'],
    [186, 20, 255, 56, 303, 425, 206, 'CD'],
    [127, 3, 192, 403, 88, 156, 13, 'AB'],
    [212, 8, 213, 403, 417, 13, 225, 'AB'],
    [214, 13, 230, 223, 263, 206, 212, 'AS'],
    [217, 2, 275, 162, 370, 418, 67, 'HA'],
    [229, 13, 275, 423, 241, 45, 67, 'AS'],
    [232, 8, 326, 88, 156, 397, 200, 'AB'],
    [321, 15, 158, 56, 57, 212, 103, 'HC'],
    [344, 2, 196, 88, 427, 446, 432, 'BD'],
    [409, 3, 272, 156, 262, 241, 102, 'HA'],
    [437, 8, 221, 325, 441, 156, 432, 'BD'],
    [452, 3, 157, 397, 241, 400, 366, 'AB'],
    [405, 3, 326, 421, 241, 335, 267, 'HA'],
    [38, 10, 213, 125, 75, 212, 240, 'CS'],
    [68, 3, 232, 237, 88, 417, 192, 'HA'],
    [213, 8, 255, 443, 449, 206, 378, 'HBD'],
    [407, 20, 192, 187, 344, 77, 188, 'CD'],
    [430, 3, 186, 399, 331, 258, 268, 'HA'],
    [208, 8, 185, 88, 441, 241, 200, 'AB'],
    [461, 3, 189, 399, 7, 102, 251, 'AS'],
    [472, 3, 188, 88, 331, 13, 225, 'AB'],
    [73, 10, 186, 56, 187, 195, 111, 'CS'],
    [142, 13, 221, 156, 331, 258, 268, 'AS'],
    [233, 15, 149, 160, 450, 85, 277, 'HC'],
    [463, 23, 150, 215, 88, 186, 155, 'HA'],
    [469, 10, 192, 323, 313, 196, 103, 'CS'],
    [282, 20, 157, 93, 246, 85, 108, 'CD'],
    [475, 23, 196, 427, 279, 85, 108, 'AD'],
    [103, 15, 213, 75, 93, 234, 240, 'HC'],
    [121, 10, 157, 56, 93, 108, 85, 'CS'],
    [330, 3, 188, 88, 336, 354, 200, 'AS'],
    [134, 15, 213, 56, 57, 150, 225, 'HC'],
    [135, 10, 275, 84, 85, 96, 225, 'CS'],
    [136, 3, 217, 423, 275, 173, 225, 'AD'],
    [196, 10, 157, 93, 114, 346, 225, 'CS'],
    [197, 23, 234, 370, 108, 173, 225, 'BD'],
    [470, 13, 232, 347, 331, 103, 225, 'AS'],
    [471, 20, 255, 57, 351, 103, 225, 'CD'],
    [448, 15, 213, 395, 429, 351, 45, 'CS'],
    [450, 8, 156, 88, 241, 302, 173, 'AB'],
    [476, 2, 149, 245, 442, 85, 181, 'AC'],
    [477, 2, 278, 324, 373, 260, 432, 'AB'],
    [306, 3, 217, 441, 156, 200, 102, 'AB'],
    [365, 3, 189, 422, 400, 206, 226, 'HA'],
    [473, 3, 282, 88, 422, 63, 257, 'HA'],
    [131, 3, 234, 400, 418, 419, 173, 'HA'],
    [169, 13, 193, 439, 331, 354, 94, 'AS'],
    [462, 5, 269, 84, 428, 112, 114, 'BC'],
    [464, 3, 230, 438, 88, 241, 45, 'AB'],
    [465, 15, 192, 411, 187, 410, 78, 'BC'],
    [474, 15, 158, 160, 246, 277, 175, 'HC'],
    [130, 23, 327, 400, 422, 43, 239, 'AD'],
    [143, 3, 234, 215, 156, 173, 280, 'HA'],
    [230, 10, 327, 56, 405, 107, 239, 'CS'],
    [242, 15, 189, 62, 246, 351, 46, 'HC'],
    [350, 15, 253, 56, 57, 212, 94, 'HC'],
    [466, 13, 232, 8, 237, 85, 102, 'AS'],
    [467, 15, 284, 125, 410, 260, 240, 'CS'],
    [468, 3, 271, 142, 244, 408, 354, 'AD'],
    [59, 13, 157, 423, 244, 241, 260, 'AS'],
    [149, 3, 157, 336, 331, 85, 348, 'AD'],
    [248, 2, 230, 156, 370, 418, 173, 'AD'],
    [373, 3, 149, 336, 331, 400, 183, 'AS'],
    [376, 3, 213, 427, 417, 262, 112, 'AB'],
    [445, 13, 213, 336, 88, 103, 200, 'AS'],
    [289, 8, 255, 262, 420, 302, 280, 'HB'],
    [3, 5, 296, 201, 274, 72, 78, 'HBD'],
    [6, 15, 214, 314, 75, 260, 240, 'CS'],
    [9, 3, 253, 126, 263, 103, 391, 'HA'],
    [154, 20, 296, 201, 72, 91, 163, 'HBD'],
    [157, 12, 203, 306, 88, 178, 202, 'AC'],
    [160, 3, 214, 400, 275, 336, 420, 'AB'],
    [254, 10, 234, 201, 72, 91, 103, 'CS'],
    [257, 10, 213, 306, 410, 75, 240, 'CS'],
    [260, 3, 157, 400, 88, 358, 173, 'HA'],
    [389, 22, 234, 201, 72, 234, 132, 'HBD'],
    [392, 3, 266, 298, 420, 8, 440, 'AS'],
    [395, 3, 326, 64, 452, 420, 156, 'AD'],
    [51, 15, 255, 413, 187, 160, 200, 'CS'],
    [105, 3, 258, 197, 6, 8, 156, 'AB'],
    [308, 13, 149, 408, 397, 196, 104, 'AS'],
    [195, 23, 234, 290, 280, 173, 132, 'HBD'],
    [210, 3, 217, 262, 423, 421, 422, 'HA'],
    [124, 20, 255, 137, 141, 194, 211, 'CD'],
    [122, 20, 269, 137, 94, 112, 114, 'CD'],
    [171, 20, 157, 290, 108, 85, 212, 'HD'],
    [286, 2, 296, 408, 201, 234, 72, 'AC'],
    [205, 2, 158, 370, 445, 389, 190, 'AB'],
    [227, 23, 234, 18, 91, 103, 354, 'HBD'],
    [359, 3, 217, 385, 206, 212, 85, 'HA'],
    [340, 3, 156, 400, 88, 156, 36, 'HA'],
    [297, 3, 278, 278, 370, 373, 251, 'HA'],
    [416, 23, 156, 403, 91, 455, 193, 'HBD'],
    [26, 13, 230, 8, 263, 185, 85, 'AS'],
    [87, 20, 186, 57, 323, 226, 49, 'CD'],
    [310, 15, 285, 86, 62, 85, 239, 'CS'],
    [398, 13, 221, 282, 331, 202, 97, 'AS'],
    [423, 22, 276, 329, 425, 104, 280, 'CD'],
    [435, 13, 150, 241, 91, 206, 103, 'HS'],
    [45, 5, 281, 91, 446, 103, 212, 'HBD'],
    [71, 3, 281, 401, 254, 255, 253, 'HA'],
    [101, 10, 213, 450, 85, 147, 206, 'CS'],
    [272, 8, 234, 72, 91, 103, 239, 'HBD'],
    [275, 20, 234, 201, 72, 103, 234, 'HBD'],
    [295, 3, 270, 262, 6, 8, 7, 'HA'],
    [362, 3, 157, 422, 241, 88, 152, 'HA'],
    [428, 13, 213, 263, 185, 212, 85, 'HS'],
    [478, 3, 230, 7, 388, 206, 243, 'AS'],
    [424, 13, 277, 386, 85, 181, 251, 'AS'],
    [97, 0, 156, 137, 170, 408, 94, 'CD'],
    [76, 3, 214, 88, 275, 6, 8, 'AB'],
    [112, 3, 275, 88, 6, 8, 7, 'AB'],
    [80, 3, 268, 427, 400, 88, 418, 'HA'],
    [110, 3, 158, 457, 370, 91, 206, 'AB'],
    [115, 3, 326, 145, 6, 8, 7, 'HA'],
    [128, 3, 270, 262, 88, 156, 370, 'AS'],
    [65, 15, 198, 93, 410, 450, 104, 'CS'],
    [199, 3, 217, 427, 400, 88, 173, 'HA'],
    [241, 3, 203, 262, 427, 178, 202, 'AS'],
    [334, 15, 253, 405, 465, 46, 194, 'CD'],
    [454, 3, 265, 222, 397, 8, 7, 'AS'],
    [460, 5, 296, 201, 328, 274, 72, 'HBD'],
    [31, 3, 232, 397, 6, 8, 7, 'HA'],
    [34, 23, 213, 263, 405, 31, 163, 'HBD'],
    [346, 8, 234, 91, 253, 103, 274, 'HBD'],
    [348, 3, 232, 305, 400, 331, 206, 'AD'],
    [411, 15, 156, 245, 52, 84, 57, 'HC'],
    [419, 13, 150, 126, 263, 103, 212, 'AS'],
    [429, 15, 157, 246, 108, 194, 211, 'CD'],
    [426, 3, 281, 370, 262, 260, 270, 'HA'],
    [55, 3, 253, 126, 425, 420, 331, 'AS'],
    [62, 3, 255, 126, 222, 397, 338, 'HA'],
    [78, 15, 214, 314, 75, 128, 240, 'CS'],
    [89, 3, 268, 397, 6, 8, 7, 'HA'],
    [94, 15, 270, 246, 137, 94, 163, 'CS'],
    [181, 23, 149, 8, 6, 263, 85, 'AD'],
    [186, 8, 150, 290, 279, 94, 194, 'HA'],
    [127, 13, 203, 403, 278, 174, 202, 'AS'],
    [212, 23, 158, 231, 399, 333, 354, 'AD'],
    [214, 3, 232, 369, 331, 399, 338, 'AD'],
    [217, 3, 270, 358, 6, 8, 7, 'HA'],
    [229, 13, 275, 423, 421, 178, 202, 'AS'],
    [232, 3, 214, 88, 275, 440, 67, 'AB'],
    [321, 8, 150, 249, 91, 132, 155, 'HBD'],
    [344, 15, 187, 413, 245, 323, 246, 'BC'],
    [409, 2, 278, 443, 370, 418, 373, 'HA'],
    [437, 20, 157, 137, 94, 323, 432, 'BD'],
    [452, 3, 278, 370, 397, 373, 281, 'AB'],
    [405, 15, 267, 84, 323, 85, 392, 'HC'],
    [38, 10, 214, 314, 398, 416, 108, 'CS'],
    [68, 3, 275, 278, 88, 370, 67, 'BD'],
    [213, 23, 286, 34, 206, 212, 91, 'HBD'],
    [407, 20, 296, 201, 72, 274, 234, 'CD'],
    [430, 3, 214, 275, 364, 108, 85, 'HA'],
    [208, 3, 191, 88, 423, 421, 422, 'AB'],
    [461, 13, 213, 399, 212, 103, 257, 'AS'],
    [472, 13, 327, 88, 423, 421, 422, 'AS'],
    [73, 20, 281, 91, 201, 212, 108, 'HD'],
    [142, 13, 327, 43, 423, 421, 422, 'AS'],
    [233, 17, 278, 160, 84, 104, 432, 'HC'],
    [463, 15, 268, 56, 57, 84, 246, 'HC'],
    [469, 3, 266, 331, 368, 399, 210, 'AS'],
    [282, 15, 150, 93, 84, 346, 155, 'CD'],
    [475, 13, 213, 408, 6, 8, 7, 'AS'],
    [103, 15, 157, 137, 94, 72, 274, 'HC'],
    [121, 10, 265, 55, 58, 86, 104, 'CS'],
    [330, 13, 327, 89, 6, 8, 331, 'AS'],
    [134, 15, 285, 55, 57, 150, 239, 'HC'],
    [135, 6, 326, 434, 23, 90, 85, 'AC'],
    [136, 13, 203, 423, 174, 202, 27, 'AS'],
    [196, 10, 213, 93, 128, 203, 212, 'CS'],
    [197, 8, 234, 91, 211, 103, 108, 'BD'],
    [470, 13, 213, 347, 386, 173, 319, 'AS'],
    [471, 20, 234, 57, 103, 280, 257, 'CD'],
    [448, 3, 232, 237, 443, 8, 7, 'AS'],
    [450, 8, 158, 88, 206, 327, 280, 'AB'],
    [476, 3, 189, 441, 6, 8, 7, 'AD'],
    [477, 23, 234, 173, 219, 108, 212, 'BD'],
    [306, 3, 217, 231, 6, 8, 7, 'AB'],
    [365, 2, 270, 418, 88, 241, 173, 'HA'],
    [473, 3, 158, 418, 88, 441, 173, 'HA'],
    [131, 8, 217, 328, 194, 46, 108, 'BD'],
    [169, 6, 327, 402, 427, 43, 238, 'AS'],
    [462, 8, 157, 441, 152, 206, 243, 'AB'],
    [464, 3, 268, 6, 8, 7, 400, 'AB'],
    [465, 5, 296, 201, 72, 91, 103, 'HBC'],
    [474, 10, 287, 160, 85, 104, 270, 'CS'],
    [130, 13, 157, 126, 422, 441, 348, 'AS'],
    [143, 3, 150, 6, 8, 7, 155, 'AD'],
    [230, 10, 253, 361, 57, 238, 280, 'CS'],
    [242, 20, 150, 91, 103, 134, 67, 'HD'],
    [350, 8, 234, 91, 108, 103, 391, 'HB'],
    [466, 0, 265, 86, 222, 156, 230, 'AC'],
    [467, 3, 191, 6, 263, 108, 107, 'AS'],
    [468, 15, 232, 402, 465, 317, 245, 'HC'],
    [59, 13, 203, 393, 421, 178, 202, 'AS'],
    [149, 3, 326, 406, 6, 8, 7, 'AB'],
    [248, 13, 287, 6, 8, 7, 331, 'AS'],
    [373, 13, 327, 336, 423, 421, 348, 'AS'],
    [376, 15, 267, 93, 429, 246, 187, 'BC'],
    [445, 15, 214, 433, 413, 52, 56, 'CS'],
    [289, 3, 157, 305, 6, 8, 7, 'AB'],
    [3, 3, 281, 401, 88, 199, 173, 'AD'],
    [6, 3, 232, 393, 88, 241, 336, 'AS'],
    [9, 3, 270, 400, 88, 418, 427, 'HA'],
    [154, 5, 269, 436, 377, 112, 114, 'HC'],
    [157, 3, 191, 393, 88, 420, 331, 'AS'],
    [160, 15, 267, 307, 57, 410, 245, 'BC'],
    [254, 3, 232, 347, 403, 399, 331, 'AS'],
    [257, 3, 185, 298, 88, 420, 443, 'AS'],
    [260, 15, 268, 329, 413, 57, 67, 'HC'],
    [389, 15, 255, 337, 413, 62, 72, 'BC'],
    [392, 15, 213, 52, 410, 75, 240, 'CS'],
    [395, 2, 217, 56, 88, 58, 323, 'AC'],
    [51, 13, 326, 89, 415, 331, 399, 'AS'],
    [105, 3, 258, 88, 415, 199, 6, 'AB'],
    [308, 15, 267, 93, 410, 246, 346, 'CS'],
    [195, 15, 217, 56, 413, 410, 187, 'HC'],
    [210, 3, 266, 6, 8, 7, 370, 'HA'],
    [124, 15, 268, 58, 411, 323, 377, 'CS'],
    [122, 15, 196, 93, 84, 411, 62, 'CD'],
    [171, 15, 158, 55, 86, 58, 239, 'HC'],
    [286, 3, 272, 222, 8, 443, 262, 'AB'],
    [205, 3, 234, 90, 206, 91, 103, 'AB'],
    [227, 8, 326, 64, 162, 370, 399, 'AB'],
    [359, 13, 326, 399, 426, 403, 331, 'AS'],
    [340, 15, 276, 55, 413, 58, 89, 'HC'],
    [297, 3, 270, 222, 6, 8, 7, 'HA'],
    [416, 3, 266, 403, 331, 227, 368, 'HA'],
    [26, 10, 204, 84, 410, 323, 416, 'CS'],
    [87, 20, 203, 328, 31, 155, 213, 'HBD'],
    [310, 3, 217, 421, 423, 422, 43, 'AS'],
    [398, 3, 266, 412, 215, 210, 227, 'AS'],
    [423, 3, 253, 126, 88, 443, 89, 'HA'],
    [435, 10, 191, 187, 398, 52, 246, 'CS'],
    [45, 3, 157, 401, 408, 217, 13, 'AD'],
    [71, 15, 271, 187, 75, 62, 234, 'HC'],
    [101, 10, 285, 86, 62, 392, 239, 'CS'],
    [272, 15, 265, 55, 446, 58, 410, 'HC'],
    [275, 15, 214, 436, 398, 410, 246, 'HC'],
    [295, 3, 270, 262, 88, 418, 241, 'HA'],
    [362, 15, 232, 57, 246, 323, 351, 'HC'],
    [428, 15, 267, 450, 57, 246, 410, 'CS'],
    [478, 15, 268, 57, 84, 323, 193, 'CS'],
    [424, 3, 270, 457, 440, 401, 331, 'AS'],
    [97, 3, 158, 427, 6, 8, 7, 'AD'],
    [76, 2, 278, 359, 88, 358, 373, 'AB'],
    [112, 2, 156, 199, 358, 420, 418, 'HA'],
    [80, 15, 297, 93, 52, 246, 323, 'HC'],
    [110, 22, 255, 187, 84, 398, 152, 'CD'],
    [115, 13, 270, 457, 358, 420, 156, 'AS'],
    [128, 13, 157, 415, 88, 199, 230, 'AS'],
    [65, 10, 267, 93, 450, 323, 446, 'CS'],
    [199, 15, 157, 93, 246, 323, 410, 'CD'],
    [241, 3, 232, 145, 6, 8, 7, 'AB'],
    [334, 3, 213, 406, 142, 88, 348, 'AD'],
    [454, 15, 267, 187, 410, 246, 398, 'CS'],
    [460, 17, 184, 411, 58, 246, 410, 'HC'],
    [31, 15, 281, 187, 413, 52, 57, 'HC'],
    [34, 15, 268, 413, 187, 57, 246, 'CS'],
    [346, 20, 296, 201, 187, 104, 274, 'HBD'],
    [348, 3, 220, 443, 275, 88, 415, 'AB'],
    [411, 23, 234, 441, 89, 103, 333, 'HD'],
    [419, 15, 317, 56, 57, 410, 239, 'CS'],
    [429, 10, 267, 246, 411, 195, 193, 'CS'],
    [426, 15, 267, 93, 84, 195, 193, 'HC'],
    [55, 3, 232, 400, 237, 7, 427, 'HA'],
    [62, 15, 265, 55, 410, 58, 425, 'HC'],
    [78, 3, 213, 393, 397, 230, 31, 'AS'],
    [89, 2, 276, 440, 370, 424, 173, 'HA'],
    [94, 15, 232, 93, 411, 410, 108, 'CS'],
    [181, 15, 150, 450, 62, 85, 155, 'HC'],
    [186, 23, 150, 126, 88, 186, 155, 'AD'],
    [127, 3, 255, 403, 275, 443, 415, 'AB'],
    [212, 13, 203, 403, 97, 178, 202, 'AS'],
    [214, 3, 192, 223, 443, 262, 420, 'AS'],
    [217, 3, 272, 262, 275, 241, 181, 'HA'],
    [229, 15, 185, 52, 246, 187, 260, 'CS'],
    [232, 2, 255, 88, 359, 423, 421, 'AB'],
    [321, 3, 234, 126, 418, 88, 173, 'HA'],
    [344, 15, 267, 413, 93, 450, 57, 'CD'],
    [409, 3, 270, 456, 427, 6, 8, 'HA'],
    [437, 15, 234, 93, 246, 450, 323, 'HC'],
    [452, 13, 232, 439, 423, 421, 422, 'AS'],
    [405, 3, 214, 421, 422, 275, 85, 'HA'],
    [38, 10, 265, 256, 465, 137, 94, 'DS'],
    [68, 3, 217, 222, 88, 443, 7, 'HA'],
    [213, 8, 255, 359, 163, 103, 378, 'HBD'],
    [407, 15, 214, 436, 187, 62, 319, 'CS'],
    [430, 15, 270, 398, 313, 93, 246, 'HC'],
    [208, 7, 278, 359, 370, 206, 173, 'AB'],
    [461, 3, 275, 399, 403, 231, 67, 'AS'],
    [472, 13, 275, 11, 88, 368, 67, 'HS'],
    [73, 15, 275, 56, 187, 201, 242, 'CD'],
    [142, 3, 188, 415, 88, 156, 241, 'AS'],
    [233, 15, 267, 160, 84, 93, 57, 'HC'],
    [463, 2, 157, 215, 359, 173, 155, 'HA'],
    [469, 15, 157, 317, 245, 465, 201, 'CS'],
    [282, 15, 213, 93, 450, 411, 410, 'CD'],
    [475, 3, 232, 426, 443, 331, 403, 'AD'],
    [103, 2, 275, 451, 427, 432, 152, 'HA'],
    [121, 15, 267, 56, 93, 407, 323, 'CS'],
    [330, 10, 214, 433, 413, 52, 201, 'CS'],
    [134, 15, 234, 329, 58, 391, 280, 'HC'],
    [135, 10, 255, 86, 246, 239, 280, 'CS'],
    [136, 15, 214, 314, 246, 188, 260, 'CD'],
    [196, 15, 157, 93, 246, 62, 446, 'CS'],
    [197, 8, 255, 184, 206, 243, 102, 'HB'],
    [470, 3, 284, 347, 403, 234, 240, 'AB'],
    [471, 15, 275, 58, 62, 257, 242, 'BC'],
    [448, 3, 266, 369, 88, 298, 420, 'AS'],
    [450, 3, 214, 275, 423, 422, 89, 'HA'],
    [476, 3, 232, 443, 441, 88, 152, 'AB'],
    [477, 3, 232, 324, 6, 8, 7, 'AD'],
    [306, 3, 266, 230, 406, 418, 331, 'AB'],
    [365, 5, 255, 328, 89, 155, 213, 'BD'],
    [473, 3, 255, 88, 275, 89, 257, 'HA'],
    [131, 3, 157, 126, 199, 427, 348, 'HA'],
    [169, 15, 221, 402, 187, 256, 398, 'CS'],
    [462, 15, 150, 450, 429, 392, 85, 'BC'],
    [464, 8, 275, 31, 418, 370, 67, 'HB'],
    [465, 15, 284, 75, 377, 234, 240, 'BC'],
    [474, 15, 267, 93, 57, 323, 450, 'HC'],
    [130, 3, 156, 199, 126, 443, 415, 'AD'],
    [143, 3, 214, 199, 275, 440, 401, 'AD'],
    [230, 3, 157, 126, 199, 441, 348, 'HA'],
    [242, 15, 213, 52, 84, 57, 346, 'HC'],
    [350, 20, 265, 55, 58, 242, 104, 'CD'],
    [466, 15, 267, 84, 93, 410, 323, 'CS'],
    [467, 3, 185, 393, 8, 88, 279, 'AS'],
    [468, 15, 267, 402, 256, 323, 344, 'CS'],
    [59, 15, 214, 314, 75, 405, 240, 'CS'],
    [149, 15, 268, 433, 52, 84, 56, 'BC'],
    [248, 3, 214, 275, 336, 420, 400, 'AB'],
    [373, 15, 267, 433, 55, 52, 465, 'CS'],
    [376, 3, 184, 358, 8, 7, 331, 'AB'],
    [445, 3, 275, 406, 443, 400, 331, 'AS'],
    [289, 13, 270, 215, 399, 440, 331, 'AS'],
    [3, 15, 267, 337, 187, 62, 234, 'HC'],
    [6, 10, 213, 306, 402, 410, 245, 'CS'],
    [9, 15, 253, 307, 57, 62, 410, 'HC'],
    [154, 15, 255, 337, 245, 62, 112, 'HC'],
    [157, 15, 214, 314, 75, 410, 240, 'CS'],
    [160, 3, 157, 126, 88, 422, 348, 'AB'],
    [254, 10, 184, 436, 405, 410, 62, 'CS'],
    [257, 3, 214, 393, 275, 8, 399, 'AS'],
    [260, 3, 187, 88, 400, 418, 242, 'HA'],
    [389, 3, 217, 451, 88, 443, 241, 'HA'],
    [392, 13, 221, 393, 369, 88, 8, 'AS'],
    [395, 2, 217, 307, 429, 64, 88, 'AC'],
    [51, 3, 266, 88, 443, 162, 420, 'AS'],
    [105, 3, 258, 88, 443, 441, 8, 'AB'],
    [308, 3, 232, 426, 6, 8, 7, 'AS'],
    [195, 3, 266, 88, 126, 443, 7, 'HA'],
    [210, 3, 270, 415, 369, 88, 443, 'HA'],
    [124, 15, 297, 57, 93, 410, 246, 'CS'],
    [122, 15, 297, 93, 450, 246, 410, 'CD'],
    [171, 15, 268, 56, 84, 57, 323, 'HC'],
    [286, 3, 253, 263, 401, 415, 146, 'AB'],
    [205, 3, 255, 152, 37, 88, 156, 'AB'],
    [227, 3, 270, 412, 210, 403, 156, 'AB'],
    [359, 3, 220, 399, 275, 415, 427, 'AS'],
    [340, 3, 266, 88, 400, 427, 443, 'HA'],
    [297, 3, 232, 237, 88, 443, 397, 'HA'],
    [416, 3, 253, 453, 454, 455, 108, 'HA'],
    [26, 3, 213, 343, 215, 279, 85, 'AS'],
    [87, 20, 150, 56, 57, 323, 155, 'CD'],
    [310, 10, 213, 84, 52, 323, 128, 'CS'],
    [398, 3, 220, 412, 415, 369, 368, 'AS'],
    [423, 15, 267, 56, 413, 57, 187, 'HC'],
    [435, 13, 266, 397, 399, 241, 152, 'AS'],
    [45, 15, 267, 187, 411, 62, 234, 'HC'],
    [71, 15, 230, 75, 187, 377, 240, 'HC'],
    [101, 0, 275, 84, 323, 152, 242, 'CS'],
    [272, 15, 157, 56, 201, 57, 239, 'CD'],
    [275, 3, 149, 401, 388, 331, 152, 'HA'],
    [295, 15, 214, 303, 314, 56, 57, 'HC'],
    [362, 15, 255, 58, 398, 328, 257, 'HC'],
    [428, 13, 266, 145, 6, 8, 7, 'AS'],
    [478, 15, 255, 58, 246, 93, 257, 'CS'],
    [424, 3, 270, 457, 6, 8, 7, 'AS'],
    [97, 15, 297, 93, 246, 323, 410, 'CD'],
    [76, 2, 217, 88, 443, 359, 152, 'AB'],
    [112, 3, 217, 88, 443, 223, 31, 'HA'],
    [80, 17, 234, 93, 56, 57, 432, 'HC'],
    [110, 15, 217, 187, 52, 246, 193, 'BC'],
    [115, 3, 266, 415, 88, 241, 199, 'HA'],
    [128, 3, 220, 215, 88, 443, 427, 'AS'],
    [65, 15, 268, 93, 246, 411, 410, 'CS'],
    [199, 15, 267, 93, 56, 57, 52, 'HC'],
    [241, 3, 266, 415, 88, 156, 427, 'AS'],
    [334, 15, 214, 433, 313, 52, 57, 'CS'],
    [454, 3, 326, 440, 237, 88, 443, 'AS'],
    [460, 2, 253, 451, 418, 88, 156, 'HA'],
    [31, 3, 326, 88, 397, 275, 241, 'HA'],
    [34, 3, 266, 88, 397, 223, 199, 'AS'],
    [346, 20, 234, 443, 401, 88, 242, 'HBD'],
    [348, 3, 270, 443, 403, 88, 439, 'AB'],
    [411, 3, 275, 367, 443, 418, 173, 'HA'],
    [419, 3, 327, 400, 422, 241, 279, 'AS'],
    [429, 10, 275, 246, 93, 84, 193, 'CS'],
    [426, 24, 255, 246, 313, 317, 152, 'HA'],
    [55, 15, 186, 55, 93, 57, 323, 'HC'],
    [62, 3, 268, 126, 263, 88, 94, 'HA'],
    [78, 13, 150, 393, 223, 37, 94, 'AS'],
    [89, 3, 217, 440, 424, 279, 152, 'HA'],
    [94, 15, 157, 246, 187, 84, 193, 'CS'],
    [181, 17, 276, 86, 410, 323, 407, 'HC'],
    [186, 15, 186, 55, 57, 93, 94, 'CD'],
    [127, 3, 232, 403, 88, 369, 11, 'AB'],
    [212, 3, 184, 403, 441, 331, 399, 'AB'],
    [214, 13, 203, 223, 88, 178, 202, 'AS'],
    [217, 3, 217, 215, 237, 88, 331, 'HA'],
    [229, 10, 214, 314, 398, 75, 240, 'CS'],
    [232, 3, 217, 88, 443, 401, 89, 'AB'],
    [321, 15, 217, 55, 58, 62, 89, 'HC'],
    [344, 3, 255, 88, 427, 156, 152, 'AD'],
    [409, 13, 287, 456, 88, 415, 275, 'AS'],
    [437, 3, 217, 427, 441, 88, 152, 'HA'],
    [452, 3, 326, 439, 399, 88, 331, 'AS'],
    [405, 3, 266, 421, 422, 241, 85, 'HA'],
    [38, 15, 185, 52, 325, 411, 346, 'CS'],
    [68, 3, 217, 237, 88, 8, 6, 'HA'],
    [213, 20, 234, 91, 163, 103, 200, 'HBD'],
    [407, 15, 214, 436, 187, 246, 310, 'CS'],
    [430, 3, 232, 399, 64, 388, 210, 'HA'],
    [208, 2, 217, 359, 88, 443, 152, 'AB'],
    [461, 13, 326, 399, 7, 331, 279, 'AS'],
    [472, 3, 268, 88, 331, 403, 443, 'AB'],
    [73, 10, 232, 55, 187, 57, 377, 'CS'],
    [142, 3, 220, 443, 331, 88, 336, 'AS'],
    [233, 15, 157, 160, 323, 246, 57, 'HC'],
    [463, 3, 255, 33, 437, 88, 152, 'HA'],
    [469, 15, 267, 404, 402, 93, 246, 'CS'],
    [282, 10, 267, 93, 84, 246, 193, 'CS'],
    [475, 3, 232, 426, 369, 347, 399, 'AD'],
    [103, 15, 268, 436, 93, 187, 245, 'HC'],
    [121, 15, 268, 56, 93, 84, 57, 'CS'],
    [330, 3, 157, 88, 199, 241, 443, 'AS'],
    [134, 15, 268, 56, 57, 246, 323, 'HC'],
    [135, 15, 327, 84, 62, 246, 323, 'CS'],
    [136, 3, 214, 423, 415, 275, 43, 'AD'],
    [196, 15, 267, 93, 246, 323, 233, 'CS'],
    [197, 8, 213, 370, 375, 173, 235, 'BD'],
    [470, 3, 217, 347, 403, 331, 43, 'AB'],
    [471, 15, 267, 57, 246, 323, 351, 'BC'],
    [448, 15, 268, 395, 93, 246, 405, 'CS'],
    [450, 3, 217, 88, 443, 241, 421, 'HA'],
    [476, 15, 270, 429, 407, 413, 84, 'CD'],
    [477, 3, 266, 324, 88, 279, 156, 'BD'],
    [306, 3, 275, 367, 443, 88, 420, 'AB'],
    [365, 15, 234, 56, 57, 323, 257, 'HC'],
    [473, 3, 270, 88, 422, 443, 37, 'HA'],
    [131, 15, 213, 56, 57, 93, 84, 'HC'],
    [169, 3, 326, 439, 412, 403, 427, 'AS'],
    [462, 15, 213, 84, 429, 160, 323, 'BC'],
    [464, 3, 220, 438, 88, 358, 223, 'HA'],
    [465, 3, 255, 437, 88, 331, 279, 'AB'],
    [474, 15, 268, 160, 246, 84, 104, 'CS'],
    [130, 3, 150, 126, 88, 155, 348, 'AS'],
    [143, 3, 270, 37, 88, 427, 241, 'HA'],
    [230, 15, 265, 55, 433, 58, 323, 'HC'],
    [242, 20, 234, 137, 46, 134, 67, 'HD'],
    [350, 15, 157, 56, 57, 405, 104, 'HC'],
    [466, 3, 191, 8, 6, 7, 88, 'AS'],
    [467, 15, 214, 314, 93, 410, 108, 'CS'],
    [468, 15, 268, 62, 402, 395, 93, 'CS'],
    [59, 3, 230, 393, 244, 241, 421, 'AS'],
    [149, 3, 220, 199, 415, 88, 275, 'AD'],
    [248, 3, 189, 443, 241, 88, 348, 'HA'],
    [373, 3, 157, 199, 241, 88, 427, 'AS'],
    [376, 3, 217, 308, 427, 88, 152, 'HA'],
    [445, 3, 156, 199, 88, 241, 423, 'AS'],
    [289, 3, 266, 415, 88, 358, 420, 'HA'],
    [144, 24, 282, 58, 18, 354, 257, 'AC'],
    [145, 12, 188, 86, 64, 85, 239, 'AS'],
    [146, 10, 185, 52, 402, 245, 354, 'CS'],
    [243, 10, 157, 84, 246, 85, 112, 'CS'],
    [244, 13, 191, 423, 215, 45, 114, 'AS'],
    [245, 20, 275, 56, 195, 465, 242, 'CD'],
    [377, 8, 234, 156, 88, 279, 200, 'AB'],
    [378, 15, 157, 57, 323, 450, 132, 'CD'],
    [379, 15, 157, 429, 84, 85, 132, 'HC'],
    [380, 20, 157, 93, 405, 212, 346, 'CD'],
    [381, 20, 230, 93, 405, 85, 346, 'CD'],
    [485, 15, 191, 256, 429, 245, 183, 'CD'],
    [488, 5, 284, 93, 75, 235, 240, 'BD'],
    [486, 8, 255, 215, 331, 85, 108, 'HBD'],
    [144, 2, 186, 418, 331, 262, 114, 'AB'],
    [145, 10, 230, 84, 245, 465, 112, 'CS'],
    [146, 10, 284, 125, 75, 62, 240, 'HC'],
    [243, 13, 221, 421, 241, 441, 215, 'AS'],
    [244, 13, 221, 423, 43, 441, 443, 'AS'],
    [245, 13, 221, 126, 422, 441, 43, 'AS'],
    [377, 3, 326, 6, 8, 7, 408, 'HA'],
    [378, 8, 234, 418, 358, 103, 173, 'HB'],
    [379, 3, 234, 441, 91, 103, 333, 'HBD'],
    [380, 3, 268, 336, 427, 88, 331, 'AS'],
    [381, 3, 157, 336, 420, 88, 348, 'AS'],
    [485, 3, 217, 441, 88, 443, 241, 'HA'],
    [488, 5, 157, 93, 91, 103, 235, 'HBD'],
    [486, 23, 234, 262, 427, 103, 163, 'HBD'],
    [144, 15, 267, 57, 323, 465, 351, 'BC'],
    [145, 13, 221, 64, 238, 210, 368, 'AS'],
    [146, 3, 271, 142, 215, 210, 368, 'AS'],
    [243, 15, 267, 86, 325, 323, 239, 'CS'],
    [244, 15, 191, 125, 75, 62, 240, 'CS'],
    [245, 5, 157, 55, 58, 246, 257, 'BC'],
    [377, 23, 150, 443, 358, 155, 173, 'HD'],
    [378, 5, 150, 57, 429, 245, 155, 'BC'],
    [379, 3, 326, 420, 331, 8, 7, 'HA'],
    [380, 10, 213, 93, 57, 411, 246, 'CS'],
    [381, 10, 213, 93, 84, 57, 411, 'CS'],
    [485, 15, 213, 52, 413, 405, 398, 'HC'],
    [488, 15, 267, 93, 246, 411, 450, 'HC'],
    [486, 15, 267, 413, 410, 84, 245, 'HC'],
    [144, 15, 195, 57, 313, 245, 328, 'CD'],
    [145, 15, 213, 84, 313, 256, 323, 'CS'],
    [146, 15, 214, 314, 402, 245, 465, 'CS'],
    [243, 15, 191, 84, 325, 246, 346, 'CS'],
    [244, 15, 191, 314, 325, 246, 346, 'CS'],
    [245, 15, 186, 56, 57, 325, 346, 'HC'],
    [377, 23, 217, 443, 88, 358, 152, 'AD'],
    [378, 15, 253, 57, 84, 62, 410, 'HC'],
    [379, 3, 253, 441, 358, 88, 173, 'HBD'],
    [380, 15, 214, 295, 433, 84, 56, 'CS'],
    [381, 15, 214, 294, 433, 62, 56, 'CS'],
    [485, 17, 275, 462, 429, 413, 152, 'AC'],
    [488, 15, 234, 93, 57, 323, 235, 'HBD'],
    [486, 3, 213, 461, 88, 443, 408, 'HA'],
];


/***/ }),

/***/ "./ts/entry.ts":
/*!*********************!*\
  !*** ./ts/entry.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = __webpack_require__(/*! ./data */ "./ts/data.ts");
var Entry = /** @class */ (function () {
    function Entry(id, item, pokemon, nature, moves, effort) {
        this.id = id;
        this.item = item;
        this.pokemon = pokemon;
        this.nature = nature;
        this.moves = moves;
        this.effort = effort;
    }
    Entry.prototype.collides_with = function (other) {
        return this.item === other.item || this.pokemon === other.pokemon;
    };
    Entry.prototype.collides_within = function (entries) {
        var _this = this;
        return entries.some(function (x) { return _this.collides_with(x); });
    };
    return Entry;
}());
exports.Entry = Entry;
exports.ALL_ENTRIES = data_1.FACTORY_DATA.map(function (data, i) {
    return new Entry(i, data[2], data[0], data[1], data.slice(3, 7), data[7]);
});


/***/ }),

/***/ "./ts/factory-helper.ts":
/*!******************************!*\
  !*** ./ts/factory-helper.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constant_1 = __webpack_require__(/*! ./constant */ "./ts/constant.ts");
var entry_1 = __webpack_require__(/*! ./entry */ "./ts/entry.ts");
var FactoryHelper = /** @class */ (function () {
    function FactoryHelper() {
    }
    FactoryHelper.choose_entry = function (prng, battle_index) {
        var prngp = prng.dup();
        var x = FactoryHelper.choose_entryQ(prngp, battle_index);
        return [prngp, x];
    };
    FactoryHelper.choose_entryQ = function (prng, battle_index) {
        var _a = FactoryHelper._choice_range(battle_index), start = _a[0], end = _a[1];
        var i = end - 1 - prng.randQ(end - start);
        return entry_1.ALL_ENTRIES[i];
    };
    FactoryHelper._choice_range = function (battle_index) {
        if (battle_index !== 7) {
            return [0, 150];
        }
        else {
            return [150, 250];
        }
    };
    FactoryHelper.choose_entries = function (prng, n, battle_index, unchoosable) {
        if (unchoosable === void 0) { unchoosable = []; }
        var prngp = prng.dup();
        var x = FactoryHelper.choose_entriesQ(prngp, n, battle_index, unchoosable);
        return [prngp, x];
    };
    FactoryHelper.choose_entriesQ = function (prng, n, battle_index, unchoosable) {
        if (unchoosable === void 0) { unchoosable = []; }
        var entries = [];
        while (entries.length < n) {
            var entry = FactoryHelper.choose_entryQ(prng, battle_index);
            if (!entry.collides_within(__spreadArrays(entries, unchoosable))) {
                entries.push(entry);
            }
        }
        return entries;
    };
    FactoryHelper.choose_starters = function (prng) {
        var prngp = prng.dup();
        var starters = FactoryHelper.choose_startersQ(prngp);
        return [prngp, starters];
    };
    FactoryHelper.choose_startersQ = function (prng) {
        var starters = FactoryHelper.choose_entriesQ(prng, constant_1.NSTARTERS, 0);
        FactoryHelper._pid_loopQ(prng, starters);
        prng.stepQ(2);
        return starters;
    };
    FactoryHelper.after_consumption = function (prng, entries, battle_index) {
        var prngp = prng.dup();
        FactoryHelper.after_consumptionQ(prngp, entries, battle_index);
        return prngp;
    };
    FactoryHelper.after_consumptionQ = function (prng, entries, battle_index) {
        this._pid_loopQ(prng, entries);
        prng.stepQ(battle_index === 1 ? 24 : 6);
    };
    FactoryHelper._pid_loopQ = function (prng, entries) {
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var entry = entries_1[_i];
            var trainer_id = FactoryHelper._rand32Q(prng);
            while (true) {
                var pid = FactoryHelper._rand32Q(prng);
                if (pid % 25 === entry.nature) {
                    break;
                }
            }
        }
    };
    FactoryHelper._rand32Q = function (prng) {
        var low = prng.randQ(0x10000);
        var high = prng.randQ(0x10000);
        return (high << 16 | low) >>> 0;
    };
    return FactoryHelper;
}());
exports.FactoryHelper = FactoryHelper;


/***/ }),

/***/ "./ts/main.ts":
/*!********************!*\
  !*** ./ts/main.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = __webpack_require__(/*! ./data */ "./ts/data.ts");
var entry_1 = __webpack_require__(/*! ./entry */ "./ts/entry.ts");
var predictor_1 = __webpack_require__(/*! ./predictor */ "./ts/predictor.ts");
var prng_1 = __webpack_require__(/*! ./prng */ "./ts/prng.ts");
var POKEMON_NAME_TO_ID = {};
data_1.POKEMON_NAMES.forEach(function (name, i) {
    POKEMON_NAME_TO_ID[name] = i;
});
function create_svg() {
    return $("<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'/>");
}
var WIDTH = 40;
var HEIGHT = 30;
function result_to_dom_node(result) {
    var svg = create_svg();
    var y = 0;
    var width = WIDTH * 3;
    var svg1 = entries_to_dom_node(result.chosen);
    svg1.setAttribute("y", String(y));
    svg.append(svg1);
    var n = result.children.length;
    addLine(svg.get(0), WIDTH * 3, HEIGHT / 2, WIDTH * 3 + 15, HEIGHT / 2);
    var lasty = 0;
    for (var i = 0; i < n; i++) {
        var child = result.children[i];
        if (i > 0) {
            addLine(svg.get(0), WIDTH * 3 + 7.5, y + HEIGHT / 2, WIDTH * 3 + 15, y + HEIGHT / 2);
        }
        lasty = y + HEIGHT / 2;
        var svg2 = result_to_dom_node(child);
        svg2.setAttribute("x", String(WIDTH * 3 + 15));
        svg2.setAttribute("y", String(y));
        svg.append(svg2);
        width = Math.max(width, WIDTH * 3 + 15 + Number(svg2.getAttribute("width")));
        y += Math.max(HEIGHT, Number(svg2.getAttribute("height"))) + 5;
    }
    addLine(svg.get(0), WIDTH * 3 + 7.5, HEIGHT / 2, WIDTH * 3 + 7.5, lasty);
    svg.attr("width", width);
    svg.attr("height", Math.max(y, HEIGHT));
    return svg.get(0);
}
function addLine(svg, x1, y1, x2, y2) {
    var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    line.setAttribute("x1", String(x1));
    line.setAttribute("y1", String(y1));
    line.setAttribute("x2", String(x2));
    line.setAttribute("y2", String(y2));
    line.setAttribute("stroke", "#333");
    line.setAttribute("stroke-width", "1");
    svg.appendChild(line);
}
function entries_to_dom_node(entries) {
    var w = WIDTH * 3;
    var h = HEIGHT;
    var svg = create_svg().attr("width", w).attr("height", h).addClass("entries");
    svg.attr("data-entries", entries.map(function (x) { return x.id; }).join(","));
    var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
    rect.setAttribute('height', String(h));
    rect.setAttribute('width', String(w));
    rect.setAttribute('rx', '10');
    rect.setAttribute('ry', '10');
    rect.setAttribute('x', '0');
    rect.setAttribute('y', '0');
    rect.setAttribute('stroke', '#333');
    rect.setAttribute('stroke-width', '1');
    rect.setAttribute('style', 'fill: #cccccc');
    svg.append(rect);
    for (var i = 0; i < entries.length; i++) {
        var image = document.createElementNS('http://www.w3.org/2000/svg', 'image');
        image.setAttribute('height', String(HEIGHT));
        image.setAttribute('width', String(WIDTH));
        image.setAttributeNS('http://www.w3.org/1999/xlink', 'href', pokemon_image(entries[i].pokemon));
        image.setAttribute('x', String(WIDTH * i));
        image.setAttribute('y', '0');
        svg.append(image);
    }
    return svg.get(0);
}
$("#result-box").empty().append(result_to_dom_node(predictor_1.Predictor.predict(new prng_1.PRNG(0))[0]));
$("#result-box svg.entries").mouseenter(function (e) {
    var svg = e.currentTarget;
    var ids = (svg.getAttribute("data-entries")).split(",").map(function (x) { return Number(x); });
    $('#tooltip').remove();
    var $tooltip = $("<div id='tooltip' />");
    var $table = $("<table />");
    $tooltip.append($table);
    for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
        var id = ids_1[_i];
        var entry = entry_1.ALL_ENTRIES[id];
        var pokemon = entry.pokemon;
        var item = entry.item;
        var nature = entry.nature;
        var $tr = $("<tr/>");
        $tr.append($("<td/>").append($("<img />").attr("src", pokemon_image_big(pokemon))));
        $tr.append($("<td/>").append($("<b />").text(data_1.POKEMON_NAMES[pokemon]))
            .append($("<span/>").text(" " + data_1.ITEM_NAMES[item] + " " + data_1.NATURE_NAMES[nature] + " " + entry.effort))
            .append("<br/>").append($("<span />").text(entry.moves.map(function (x) { return data_1.MOVE_NAMES[x]; }).join(" "))));
        $table.append($tr);
    }
    $("#result-box").append($tooltip);
    resize_tooltip(svg, $tooltip.get(0));
    $tooltip.mouseleave(function (e) {
        if (!svg.contains(e.relatedTarget)) {
            $('#tooltip').hide();
        }
    });
}).mouseleave(function (e) {
    var tooltip = $('#tooltip').get(0);
    if (!tooltip.contains(e.relatedTarget)) {
        $('#tooltip').hide();
    }
});
function resize_tooltip(button, tooltip) {
    var buttonRect = button.getBoundingClientRect();
    var tooltipRect = tooltip.getBoundingClientRect();
    $(tooltip).css("left", (buttonRect.left + window.scrollX) + "px");
    $(tooltip).css("top", (buttonRect.top + window.scrollY + buttonRect.height) + "px");
}
function pokemon_image(id) {
    return "http://veekun.com/dex/media/pokemon/icons/" + id + ".png";
}
function pokemon_image_big(id) {
    return "https://serebii.net/pokearth/sprites/dp/" + String(id).padStart(3, "0") + ".png";
}
function switch_to_search_form() {
    $('.container').hide();
    $('#search').show();
    $('.nav-item').removeClass('active');
    $('#nav-item-search').addClass('active');
}
function switch_to_seed_form() {
    $('.container').hide();
    $('#seed-form').show();
    $('.nav-item').removeClass('active');
    $('#nav-item-seed').addClass('active');
}
function switch_to_result() {
    $('.container').hide();
    $('#result').show();
    $('.nav-item').removeClass('active');
    $('#nav-item-result').addClass('active');
}
function switch_to_round_form() {
    $('.subcontainer').hide();
    $('#round-form').show();
    $('.breadcrumb-item').removeClass('selected');
    $('#breadcrumb-round').addClass('selected');
}
function switch_to_poke_form() {
    $('.subcontainer').hide();
    $('#poke-form').show();
    $('.breadcrumb-item').removeClass('selected');
    $('#breadcrumb-poke').addClass('selected');
}
function switch_to_entries_form() {
    $('.subcontainer').hide();
    $('#entries-form').show();
    $('.breadcrumb-item').removeClass('selected');
    $('#breadcrumb-entries').addClass('selected');
}
function switch_to_id_form() {
    $('.subcontainer').hide();
    $('#id-form').show();
    $('.breadcrumb-item').removeClass('selected');
    $('#breadcrumb-id').addClass('selected');
    var name = $('#poke0').val();
    if (name !== "" && name in POKEMON_NAME_TO_ID) {
        var id = POKEMON_NAME_TO_ID[name];
        $('#poke0-name').empty().append($("<span/>").text(name)).append($('<img />').attr('src', pokemon_image(id)));
    }
    else {
        $('#poke0-name').empty();
    }
}
$(function () {
    $('#nav-item-search').click(function (e) {
        switch_to_search_form();
    });
    $('#nav-item-seed').click(function (e) {
        switch_to_seed_form();
    });
    $('#nav-item-result').click(function (e) {
        switch_to_result();
    });
    $('#ok-round').click(function (e) {
        switch_to_poke_form();
    });
    $('#breadcrumb-round').click(function (e) {
        switch_to_round_form();
    });
    $('#breadcrumb-poke').click(function (e) {
        switch_to_poke_form();
    });
    $('#breadcrumb-entries').click(function (e) {
        switch_to_entries_form();
    });
    $('#breadcrumb-id').click(function (e) {
        switch_to_id_form();
    });
    var _loop_1 = function (i) {
        $('#poke' + i).on('input', function (e) {
            var input = e.target;
            var name = input.value;
            if (name !== "" && name in POKEMON_NAME_TO_ID) {
                var id = POKEMON_NAME_TO_ID[name];
                $("#pokeimg" + i).empty().append($('<img />').attr('src', pokemon_image(id)));
            }
            else {
                $("#pokeimg" + i).empty();
            }
        });
    };
    for (var i = 0; i < 6; i++) {
        _loop_1(i);
    }
});


/***/ }),

/***/ "./ts/predictor.ts":
/*!*************************!*\
  !*** ./ts/predictor.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var constant_1 = __webpack_require__(/*! ./constant */ "./ts/constant.ts");
var factory_helper_1 = __webpack_require__(/*! ./factory-helper */ "./ts/factory-helper.ts");
var util_1 = __webpack_require__(/*! ./util */ "./ts/util.ts");
var Predictor = /** @class */ (function () {
    function Predictor() {
    }
    Predictor.predict = function (prng) {
        return new Predictor().predict(prng);
    };
    Predictor.prototype.predict = function (prng) {
        var _a = factory_helper_1.FactoryHelper.choose_starters(prng), prngp = _a[0], starters = _a[1];
        return this.predict0(prngp, [], [], starters);
    };
    Predictor.prototype.predict0 = function (prng, enemies, skipped, starters) {
        var _this = this;
        if (enemies.length === constant_1.NBATTLES) {
            return [];
        }
        var unchoosable = enemies[enemies.length - 1] || starters;
        var maybe_players = __spreadArrays(starters, util_1.Util.arrayFlatten(enemies.slice(0, -1)));
        var battle_index = enemies.length + 1;
        var results = OneEnemyPredictor.predict(prng, unchoosable, maybe_players, battle_index);
        return results.map(function (result) {
            var prngp = result[0], chosen = result[1], skippedp = result[2];
            var children = _this.predict0(prngp, __spreadArrays(enemies, [chosen]), __spreadArrays(skipped, [skippedp]), starters);
            return { prng: prngp, chosen: chosen, skipped: skippedp, children: children };
        });
    };
    return Predictor;
}());
exports.Predictor = Predictor;
var OneEnemyPredictor = /** @class */ (function () {
    function OneEnemyPredictor(unchoosable, maybe_players, battle_index) {
        this.unchoosable = unchoosable;
        this.maybe_players = maybe_players;
        this.battle_index = battle_index;
    }
    OneEnemyPredictor.predict = function (prng, unchoosable, maybe_players, battle_index) {
        return new OneEnemyPredictor(unchoosable, maybe_players, battle_index).predict(prng);
    };
    OneEnemyPredictor.prototype.predict = function (prng) {
        return this.predict0(prng, [], []);
    };
    OneEnemyPredictor.prototype.predict0 = function (prng, skipped, chosen) {
        if (chosen.length === constant_1.NPARTY) {
            var prngp_1 = factory_helper_1.FactoryHelper.after_consumption(prng, chosen, this.battle_index);
            return [[prngp_1, chosen, skipped]];
        }
        var _a = factory_helper_1.FactoryHelper.choose_entry(prng, this.battle_index), prngp = _a[0], x = _a[1];
        if (x.collides_within(__spreadArrays(this.unchoosable, chosen, skipped))) {
            return this.predict0(prngp, skipped, chosen);
        }
        else if (!x.collides_within(this.maybe_players) || skipped.length === constant_1.NPARTY) {
            return this.predict0(prngp, skipped, __spreadArrays(chosen, [x]));
        }
        else {
            var result1 = this.predict0(prngp, skipped, __spreadArrays(chosen, [x]));
            var result2 = this.predict0(prngp, __spreadArrays(skipped, [x]), chosen);
            return __spreadArrays(result1, result2);
        }
    };
    return OneEnemyPredictor;
}());
exports.OneEnemyPredictor = OneEnemyPredictor;


/***/ }),

/***/ "./ts/prng.ts":
/*!********************!*\
  !*** ./ts/prng.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var A = 0x41c64e6d;
var B = 0x6073;
var PRNG = /** @class */ (function () {
    function PRNG(seed) {
        this.seed = seed;
    }
    PRNG.prototype.rand = function (n) {
        var prngp = this.dup();
        return [prngp, prngp.randQ(n)];
    };
    PRNG.prototype.randQ = function (n) {
        this.succ();
        return (this.seed >>> 16) % n;
    };
    PRNG.prototype.succ = function () {
        this.seed = u32(Math.imul(this.seed, A) + B);
    };
    PRNG.prototype.stepQ = function (n) {
        var _a = make_const(n), a = _a[0], b = _a[1];
        this.seed = u32(Math.imul(this.seed, a) + b);
    };
    PRNG.prototype.dup = function () {
        return new PRNG(this.seed);
    };
    return PRNG;
}());
exports.PRNG = PRNG;
function make_const(n) {
    var a = A;
    var b = B;
    var c = 1;
    var d = 0;
    while (n) {
        if (n & 1) {
            d = u32(Math.imul(d, a) + b);
            c = u32(Math.imul(c, a));
        }
        b = u32(Math.imul(b, a) + b);
        a = u32(Math.imul(a, a));
        n >>>= 1;
    }
    return [c, d];
}
function u32(x) { return x >>> 0; }


/***/ }),

/***/ "./ts/util.ts":
/*!********************!*\
  !*** ./ts/util.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Util = /** @class */ (function () {
    function Util() {
    }
    Util.arrayFlatten = function (ary) {
        var ret = [];
        for (var _i = 0, ary_1 = ary; _i < ary_1.length; _i++) {
            var e = ary_1[_i];
            ret.push.apply(ret, e);
        }
        return ret;
    };
    return Util;
}());
exports.Util = Util;


/***/ })

/******/ });
//# sourceMappingURL=main.js.map